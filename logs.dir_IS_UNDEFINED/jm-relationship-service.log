2019-02-25 16:29:16.640|INFO|org.springframework.context.support.AbstractApplicationContext|main|prepareRefresh|583|Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@1e13529a: startup date [Mon Feb 25 16:29:16 CST 2019]; root of context hierarchy
2019-02-25 16:29:16.948|INFO|org.hibernate.validator.internal.util.Version|background-preinit|<clinit>|30|HV000001: Hibernate Validator 5.3.6.Final
2019-02-25 16:29:17.012|INFO|org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor|main|<init>|155|JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2019-02-25 16:29:17.053|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'configurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$f08f447f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 16:29:17.470|INFO|org.springframework.boot.SpringApplication|main|logStartupProfileInfo|593|No active profile set, falling back to default profiles: default
2019-02-25 16:29:17.508|INFO|org.springframework.context.support.AbstractApplicationContext|main|prepareRefresh|583|Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1e5f4170: startup date [Mon Feb 25 16:29:17 CST 2019]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@1e13529a
2019-02-25 16:29:19.631|INFO|org.springframework.data.repository.config.RepositoryConfigurationDelegate|main|multipleStoresDetected|165|Multiple Spring Data modules found, entering strict repository configuration mode!
2019-02-25 16:29:19.960|INFO|com.ctrip.framework.foundation.internals.provider.DefaultApplicationProvider|main|initAppId|93|App ID is set to jm-relationship-service-v1 by app.id property from /META-INF/app.properties
2019-02-25 16:29:19.962|INFO|com.ctrip.framework.foundation.internals.provider.DefaultServerProvider|main|initEnvType|108|Environment is set to [dev] by JVM system property 'env'.
2019-02-25 16:29:20.131|INFO|org.springframework.cloud.context.scope.GenericScope|main|setSerializationId|288|BeanFactory id=aef2ef56-a824-3d0b-9d96-a0ca4374343d
2019-02-25 16:29:20.204|INFO|com.ctrip.framework.apollo.internals.DefaultMetaServerProvider|main|initMetaServerAddress|42|Located meta services from apollo.meta configuration: http://172.16.175.22:8080!
2019-02-25 16:29:20.207|INFO|com.ctrip.framework.apollo.core.MetaDomainConsts|main|initMetaServerAddress|93|Located meta server address http://172.16.175.22:8080 for env DEV from com.ctrip.framework.apollo.internals.DefaultMetaServerProvider
2019-02-25 16:29:20.412|INFO|org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor|main|<init>|155|JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2019-02-25 16:29:20.488|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'com.sunfield.microframe.feign.JmAppUserFeignService' of type [org.springframework.cloud.netflix.feign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 16:29:20.489|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'com.sunfield.microframe.feign.JmIndustriesFeignService' of type [org.springframework.cloud.netflix.feign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 16:29:20.673|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$d4754182] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 16:29:20.877|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'redisConfig' of type [com.sunfield.microframe.common.config.RedisConfig$$EnhancerBySpringCGLIB$$a1361d69] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 16:29:20.891|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'org.springframework.cache.annotation.ProxyCachingConfiguration' of type [org.springframework.cache.annotation.ProxyCachingConfiguration$$EnhancerBySpringCGLIB$$1d8777a0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 16:29:20.997|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'org.springframework.cloud.netflix.metrics.MetricsInterceptorConfiguration$MetricsRestTemplateConfiguration' of type [org.springframework.cloud.netflix.metrics.MetricsInterceptorConfiguration$MetricsRestTemplateConfiguration$$EnhancerBySpringCGLIB$$6a1e7c3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 16:29:21.032|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$f08f447f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 16:29:22.561|INFO|org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer|main|initialize|89|Tomcat initialized with port(s): 18089 (http)
2019-02-25 16:29:22.582|INFO|org.apache.juli.logging.DirectJDKLog|main|log|180|Starting service [Tomcat]
2019-02-25 16:29:22.584|INFO|org.apache.juli.logging.DirectJDKLog|main|log|180|Starting Servlet Engine: Apache Tomcat/8.5.27
2019-02-25 16:29:22.901|INFO|org.apache.juli.logging.DirectJDKLog|localhost-startStop-1|log|180|Initializing Spring embedded WebApplicationContext
2019-02-25 16:29:22.901|INFO|org.springframework.boot.context.embedded.EmbeddedWebApplicationContext|localhost-startStop-1|prepareEmbeddedWebApplicationContext|276|Root WebApplicationContext: initialization completed in 5393 ms
2019-02-25 16:29:23.400|INFO|org.springframework.boot.web.servlet.ServletRegistrationBean|localhost-startStop-1|onStartup|190|Mapping servlet: 'statViewServlet' to [/druid/*]
2019-02-25 16:29:23.401|INFO|org.springframework.boot.web.servlet.ServletRegistrationBean|localhost-startStop-1|onStartup|190|Mapping servlet: 'dispatcherServlet' to [/]
2019-02-25 16:29:23.404|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|258|Mapping filter: 'metricsFilter' to: [/*]
2019-02-25 16:29:23.405|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|258|Mapping filter: 'characterEncodingFilter' to: [/*]
2019-02-25 16:29:23.405|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|258|Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-02-25 16:29:23.405|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|258|Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-02-25 16:29:23.406|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|258|Mapping filter: 'requestContextFilter' to: [/*]
2019-02-25 16:29:23.406|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|258|Mapping filter: 'webRequestLoggingFilter' to: [/*]
2019-02-25 16:29:23.406|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|271|Mapping filter: 'webStatFilter' to urls: [/*]
2019-02-25 16:29:23.406|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|258|Mapping filter: 'applicationContextIdFilter' to: [/*]
2019-02-25 16:29:23.957|INFO|org.springframework.aop.framework.CglibAopProxy|main|doValidateClass|268|Final method [private final void com.alibaba.druid.pool.DruidDataSource.decrementPoolingCount()] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.
2019-02-25 16:29:23.957|INFO|org.springframework.aop.framework.CglibAopProxy|main|doValidateClass|268|Final method [private final void com.alibaba.druid.pool.DruidDataSource.incrementPoolingCount()] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.
2019-02-25 16:29:23.958|INFO|org.springframework.aop.framework.CglibAopProxy|main|doValidateClass|268|Final method [protected final void com.alibaba.druid.pool.DruidDataSource.handleFatalError(com.alibaba.druid.pool.DruidPooledConnection,java.sql.SQLException,java.lang.String) throws java.sql.SQLException] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.
2019-02-25 16:29:24.274|INFO|org.springframework.context.support.AbstractApplicationContext|main|prepareRefresh|583|Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@22b7ef2b: startup date [Mon Feb 25 16:29:24 CST 2019]; parent: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1e5f4170
2019-02-25 16:29:24.308|INFO|org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor|main|<init>|155|JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2019-02-25 16:29:25.406|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/removeFriend],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<com.sunfield.microframe.domain.JmRelationshipFriendship> com.sunfield.microframe.rest.RelationshipController.removeFriend(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 16:29:25.407|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/addFriendRequest],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<com.sunfield.microframe.domain.JmRelationshipFriendship> com.sunfield.microframe.rest.RelationshipController.addFriendRequest(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 16:29:25.408|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/agreeAsAFriend],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<com.sunfield.microframe.domain.JmRelationshipFriendship> com.sunfield.microframe.rest.RelationshipController.agreeAsAFriend(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 16:29:25.408|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/findFriendRecord],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<com.sunfield.microframe.domain.JmRelationshipFriendship> com.sunfield.microframe.rest.RelationshipController.findFriendRecord(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 16:29:25.408|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/findFriends],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<java.util.List<com.sunfield.microframe.domain.JmRelationshipFriendship>> com.sunfield.microframe.rest.RelationshipController.findFriends(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 16:29:25.409|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/findFriendsPage],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<com.sunfield.microframe.common.response.Page<com.sunfield.microframe.domain.JmRelationshipFriendship>> com.sunfield.microframe.rest.RelationshipController.findFriendsPage(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 16:29:25.409|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/rejectFriendRequest],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<com.sunfield.microframe.domain.JmRelationshipFriendship> com.sunfield.microframe.rest.RelationshipController.rejectFriendRequest(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 16:29:25.410|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/findFriendRequestsOppsite],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<java.util.List<com.sunfield.microframe.domain.JmRelationshipFriendship>> com.sunfield.microframe.rest.RelationshipController.findFriendRequestsOppsite(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 16:29:25.410|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/findFriendRequestsOppsitePage],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<com.sunfield.microframe.common.response.Page<com.sunfield.microframe.domain.JmRelationshipFriendship>> com.sunfield.microframe.rest.RelationshipController.findFriendRequestsOppsitePage(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 16:29:25.413|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/swagger-resources]}" onto public org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-02-25 16:29:25.414|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/swagger-resources/configuration/ui]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-02-25 16:29:25.415|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/swagger-resources/configuration/security]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-02-25 16:29:25.418|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-02-25 16:29:25.418|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-02-25 16:29:25.470|WARN|com.netflix.config.sources.URLConfigurationSource|main|<init>|121|No URLs will be polled as dynamic configuration sources.
2019-02-25 16:29:25.470|INFO|com.netflix.config.sources.URLConfigurationSource|main|<init>|122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2019-02-25 16:29:25.488|INFO|com.netflix.config.DynamicPropertyFactory|main|getInstance|281|DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@63bca84d
2019-02-25 16:29:26.534|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/heapdump || /heapdump.json],methods=[GET],produces=[application/octet-stream]}" onto public void org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint.invoke(boolean,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.io.IOException,javax.servlet.ServletException
2019-02-25 16:29:26.535|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/auditevents || /auditevents.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public org.springframework.http.ResponseEntity<?> org.springframework.boot.actuate.endpoint.mvc.AuditEventsMvcEndpoint.findByPrincipalAndAfterAndType(java.lang.String,java.util.Date,java.lang.String)
2019-02-25 16:29:26.537|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/archaius || /archaius.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:29:26.538|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/env],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.context.environment.EnvironmentManagerMvcEndpoint.value(java.util.Map<java.lang.String, java.lang.String>)
2019-02-25 16:29:26.538|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/env/reset],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> org.springframework.cloud.context.environment.EnvironmentManagerMvcEndpoint.reset()
2019-02-25 16:29:26.539|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/mappings || /mappings.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:29:26.539|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/refresh || /refresh.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke()
2019-02-25 16:29:26.540|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/configprops || /configprops.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:29:26.541|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/trace || /trace.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:29:26.541|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/dump || /dump.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:29:26.542|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/features || /features.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:29:26.543|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/metrics/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint.value(java.lang.String)
2019-02-25 16:29:26.543|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/metrics || /metrics.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:29:26.544|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/health || /health.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint.invoke(javax.servlet.http.HttpServletRequest,java.security.Principal)
2019-02-25 16:29:26.544|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/beans || /beans.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:29:26.545|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/env/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EnvironmentMvcEndpoint.value(java.lang.String)
2019-02-25 16:29:26.545|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/env || /env.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:29:26.546|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/info || /info.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:29:26.546|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/service-registry/instance-status],methods=[GET]}" onto public org.springframework.http.ResponseEntity org.springframework.cloud.client.serviceregistry.endpoint.ServiceRegistryEndpoint.getStatus()
2019-02-25 16:29:26.547|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/service-registry/instance-status],methods=[POST]}" onto public org.springframework.http.ResponseEntity<?> org.springframework.cloud.client.serviceregistry.endpoint.ServiceRegistryEndpoint.setStatus(java.lang.String)
2019-02-25 16:29:26.548|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/loggers/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.LoggersMvcEndpoint.get(java.lang.String)
2019-02-25 16:29:26.548|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/loggers/{name:.*}],methods=[POST],consumes=[application/vnd.spring-boot.actuator.v1+json || application/json],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.LoggersMvcEndpoint.set(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)
2019-02-25 16:29:26.549|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/loggers || /loggers.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:29:26.549|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/autoconfig || /autoconfig.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:29:26.550|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/hystrix.stream/**]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.cloud.netflix.endpoint.ServletWrappingEndpoint.handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-02-25 16:29:26.818|INFO|springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping|main|initHandlerMethods|69|Mapped URL path [/v2/api-docs] onto method [public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)]
2019-02-25 16:29:27.099|WARN|com.netflix.config.sources.URLConfigurationSource|main|<init>|121|No URLs will be polled as dynamic configuration sources.
2019-02-25 16:29:27.099|INFO|com.netflix.config.sources.URLConfigurationSource|main|<init>|122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2019-02-25 16:29:27.378|INFO|org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter|main|initControllerAdviceCache|534|Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1e5f4170: startup date [Mon Feb 25 16:29:17 CST 2019]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@1e13529a
2019-02-25 16:29:27.509|INFO|org.springframework.web.servlet.handler.AbstractUrlHandlerMapping|main|registerHandler|362|Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 16:29:27.510|INFO|org.springframework.web.servlet.handler.AbstractUrlHandlerMapping|main|registerHandler|362|Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 16:29:27.669|INFO|org.springframework.web.servlet.handler.AbstractUrlHandlerMapping|main|registerHandler|362|Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 16:29:28.506|INFO|org.springframework.ui.freemarker.SpringTemplateLoader|main|<init>|61|SpringTemplateLoader for FreeMarker: using resource loader [org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1e5f4170: startup date [Mon Feb 25 16:29:17 CST 2019]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@1e13529a] and template loader path [classpath:/templates/]
2019-02-25 16:29:28.507|INFO|org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer|main|postProcessTemplateLoaders|127|ClassTemplateLoader for Spring macros added to FreeMarker configuration
2019-02-25 16:29:29.034|INFO|org.springframework.jmx.export.MBeanExporter|main|afterSingletonsInstantiated|431|Registering beans for JMX exposure on startup
2019-02-25 16:29:29.036|INFO|org.springframework.jmx.export.MBeanExporter|main|autodetect|916|Bean with name 'druidDataSource' has been autodetected for JMX exposure
2019-02-25 16:29:29.048|INFO|org.springframework.jmx.export.MBeanExporter|main|autodetect|916|Bean with name 'configurationPropertiesRebinder' has been autodetected for JMX exposure
2019-02-25 16:29:29.048|INFO|org.springframework.jmx.export.MBeanExporter|main|autodetect|916|Bean with name 'refreshEndpoint' has been autodetected for JMX exposure
2019-02-25 16:29:29.049|INFO|org.springframework.jmx.export.MBeanExporter|main|autodetect|916|Bean with name 'environmentManager' has been autodetected for JMX exposure
2019-02-25 16:29:29.050|INFO|org.springframework.jmx.export.MBeanExporter|main|autodetect|916|Bean with name 'serviceRegistryEndpoint' has been autodetected for JMX exposure
2019-02-25 16:29:29.050|INFO|org.springframework.jmx.export.MBeanExporter|main|autodetect|916|Bean with name 'refreshScope' has been autodetected for JMX exposure
2019-02-25 16:29:29.053|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'environmentManager': registering with JMX server as MBean [org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager]
2019-02-25 16:29:29.067|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'serviceRegistryEndpoint': registering with JMX server as MBean [org.springframework.cloud.client.serviceregistry.endpoint:name=serviceRegistryEndpoint,type=ServiceRegistryEndpoint]
2019-02-25 16:29:29.074|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'refreshScope': registering with JMX server as MBean [org.springframework.cloud.context.scope.refresh:name=refreshScope,type=RefreshScope]
2019-02-25 16:29:29.086|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'configurationPropertiesRebinder': registering with JMX server as MBean [org.springframework.cloud.context.properties:name=configurationPropertiesRebinder,context=1e5f4170,type=ConfigurationPropertiesRebinder]
2019-02-25 16:29:29.092|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'refreshEndpoint': registering with JMX server as MBean [org.springframework.cloud.endpoint:name=refreshEndpoint,type=RefreshEndpoint]
2019-02-25 16:29:29.096|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|671|Located MBean 'druidDataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=druidDataSource,type=DruidDataSource]
2019-02-25 16:29:29.120|INFO|org.springframework.jmx.export.MBeanExporter|main|afterSingletonsInstantiated|431|Registering beans for JMX exposure on startup
2019-02-25 16:29:29.133|INFO|org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup|main|start|343|Starting beans in phase 0
2019-02-25 16:29:29.140|INFO|org.springframework.cloud.netflix.eureka.InstanceInfoFactory|main|create|71|Setting initial instance status as: STARTING
2019-02-25 16:29:29.194|INFO|com.netflix.discovery.DiscoveryClient|main|<init>|347|Initializing Eureka in region us-east-1
2019-02-25 16:29:29.763|INFO|com.netflix.discovery.provider.DiscoveryJerseyProvider|main|<init>|70|Using JSON encoding codec LegacyJacksonJson
2019-02-25 16:29:29.764|INFO|com.netflix.discovery.provider.DiscoveryJerseyProvider|main|<init>|71|Using JSON decoding codec LegacyJacksonJson
2019-02-25 16:29:30.012|INFO|com.netflix.discovery.provider.DiscoveryJerseyProvider|main|<init>|80|Using XML encoding codec XStreamXml
2019-02-25 16:29:30.013|INFO|com.netflix.discovery.provider.DiscoveryJerseyProvider|main|<init>|81|Using XML decoding codec XStreamXml
2019-02-25 16:29:30.358|INFO|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver|main|getClusterEndpoints|43|Resolving eureka endpoints via configuration
2019-02-25 16:29:30.411|INFO|com.netflix.discovery.DiscoveryClient|main|fetchRegistry|934|Disable delta property : false
2019-02-25 16:29:30.411|INFO|com.netflix.discovery.DiscoveryClient|main|fetchRegistry|935|Single vip registry refresh property : null
2019-02-25 16:29:30.411|INFO|com.netflix.discovery.DiscoveryClient|main|fetchRegistry|936|Force full registry fetch : false
2019-02-25 16:29:30.412|INFO|com.netflix.discovery.DiscoveryClient|main|fetchRegistry|937|Application is null : false
2019-02-25 16:29:30.412|INFO|com.netflix.discovery.DiscoveryClient|main|fetchRegistry|938|Registered Applications size is zero : true
2019-02-25 16:29:30.412|INFO|com.netflix.discovery.DiscoveryClient|main|fetchRegistry|940|Application version is -1: true
2019-02-25 16:29:30.412|INFO|com.netflix.discovery.DiscoveryClient|main|getAndStoreFullRegistry|1023|Getting all instance registry info from the eureka server
2019-02-25 16:29:30.603|INFO|com.netflix.discovery.DiscoveryClient|main|getAndStoreFullRegistry|1032|The response status is 200
2019-02-25 16:29:30.604|INFO|com.netflix.discovery.DiscoveryClient|main|initScheduledTasks|1258|Starting heartbeat executor: renew interval is: 30
2019-02-25 16:29:30.606|INFO|com.netflix.discovery.InstanceInfoReplicator|main|<init>|59|InstanceInfoReplicator onDemand update allowed rate per min is 4
2019-02-25 16:29:30.615|INFO|com.netflix.discovery.DiscoveryClient|main|<init>|434|Discovery Client initialized at timestamp 1551083370614 with initial instances count: 13
2019-02-25 16:29:30.641|INFO|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry|main|register|40|Registering application jm-relationship-service with eureka with status UP
2019-02-25 16:29:30.647|INFO|com.netflix.discovery.DiscoveryClient$3|main|notify|1293|Saw local status change event StatusChangeEvent [timestamp=1551083370647, current=UP, previous=STARTING]
2019-02-25 16:29:30.651|INFO|com.netflix.discovery.DiscoveryClient|DiscoveryClient-InstanceInfoReplicator-0|register|804|DiscoveryClient_JM-RELATIONSHIP-SERVICE/192.168.4.152:18089: registering service...
2019-02-25 16:29:30.656|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'auditEventsEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=auditEventsEndpoint]
2019-02-25 16:29:30.673|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'archaiusEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=archaiusEndpoint]
2019-02-25 16:29:30.687|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'featuresEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=featuresEndpoint]
2019-02-25 16:29:30.690|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'requestMappingEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=requestMappingEndpoint]
2019-02-25 16:29:30.692|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'environmentEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=environmentEndpoint]
2019-02-25 16:29:30.698|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'healthEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=healthEndpoint]
2019-02-25 16:29:30.699|INFO|com.netflix.discovery.DiscoveryClient|DiscoveryClient-InstanceInfoReplicator-0|register|813|DiscoveryClient_JM-RELATIONSHIP-SERVICE/192.168.4.152:18089 - registration status: 204
2019-02-25 16:29:30.701|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'beansEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=beansEndpoint]
2019-02-25 16:29:30.703|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'infoEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=infoEndpoint]
2019-02-25 16:29:30.706|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'loggersEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=loggersEndpoint]
2019-02-25 16:29:30.712|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'metricsEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=metricsEndpoint]
2019-02-25 16:29:30.714|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'traceEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=traceEndpoint]
2019-02-25 16:29:30.717|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'dumpEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=dumpEndpoint]
2019-02-25 16:29:30.719|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'autoConfigurationReportEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=autoConfigurationReportEndpoint]
2019-02-25 16:29:30.721|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'configurationPropertiesReportEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=configurationPropertiesReportEndpoint]
2019-02-25 16:29:30.722|INFO|org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup|main|start|343|Starting beans in phase 2147483647
2019-02-25 16:29:30.722|INFO|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper|main|start|151|Context refreshed
2019-02-25 16:29:30.736|INFO|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper|main|start|154|Found 1 custom documentation plugin(s)
2019-02-25 16:29:30.773|INFO|springfox.documentation.spring.web.scanners.ApiListingReferenceScanner|main|scan|41|Scanning for api listing references
2019-02-25 16:29:31.089|INFO|org.springframework.cloud.netflix.hystrix.HystrixCircuitBreakerConfiguration$HystrixMetricsPollerConfiguration|main|start|138|Starting poller
2019-02-25 16:29:31.122|INFO|org.apache.juli.logging.DirectJDKLog|main|log|180|Initializing ProtocolHandler ["http-nio-18089"]
2019-02-25 16:29:31.130|INFO|org.apache.juli.logging.DirectJDKLog|main|log|180|Starting ProtocolHandler ["http-nio-18089"]
2019-02-25 16:29:31.141|INFO|org.apache.juli.logging.DirectJDKLog|main|log|180|Using a shared selector for servlet write/read
2019-02-25 16:29:31.161|INFO|org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer|main|start|201|Tomcat started on port(s): 18089 (http)
2019-02-25 16:29:31.162|INFO|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration|main|onApplicationEvent|124|Updating port to 18089
2019-02-25 16:29:31.163|INFO|com.codingapi.tx.springcloud.listener.ServerListener|main|onApplicationEvent|24|onApplicationEvent -> onApplicationEvent. org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer@5f1a3c4
2019-02-25 16:29:31.167|INFO|com.codingapi.tx.netty.service.TxManagerHttpRequestHelper|main|reloadHttpRequestService|47|load HttpRequestService .
2019-02-25 16:29:31.167|INFO|com.sunfield.microframe.common.config.TxManagerHttpRequestServiceImpl|main|httpGet|18|httpGet start
2019-02-25 16:29:31.408|INFO|com.sunfield.microframe.common.config.TxManagerHttpRequestServiceImpl|main|httpGet|20|httpGet end,res is {"ip":"172.16.175.24","port":9999,"heart":15,"delay":5,"compensateMaxWaitTime":5000}

2019-02-25 16:29:31.409|INFO|com.codingapi.tx.netty.service.impl.NettyDistributeServiceImpl|main|getTxServer|43|get txManager ->{"ip":"172.16.175.24","port":9999,"heart":15,"delay":5,"compensateMaxWaitTime":5000}

2019-02-25 16:29:31.411|INFO|com.codingapi.tx.netty.service.impl.NettyDistributeServiceImpl|main|getTxServer|57|host:172.16.175.24,port:9999,heart:15,delay:5,compensateMaxWaitTime:5000
2019-02-25 16:29:31.411|INFO|com.codingapi.tx.netty.service.impl.NettyDistributeServiceImpl|main|getTxServer|59|host:172.16.175.24,port:9999,heart:15,delay:5,compensateMaxWaitTime:5000
2019-02-25 16:29:31.913|INFO|com.codingapi.tx.netty.service.impl.NettyServiceImpl|main|start|85|connection txManager-socket-> host:172.16.175.24,port:9999
2019-02-25 16:29:31.953|INFO|com.codingapi.tx.listener.service.impl.InitServiceImpl|main|start|25|socket-start..
2019-02-25 16:29:31.969|INFO|org.springframework.boot.StartupInfoLogger|main|logStarted|57|Started ServiceApplication in 16.048 seconds (JVM running for 18.628)
2019-02-25 16:29:31.976|INFO|com.codingapi.tx.netty.handler.TransactionHandler|nioEventLoopGroup-2-1|channelActive|87|connection -->io.netty.channel.DefaultChannelHandlerContext@47c91245
2019-02-25 16:29:33.270|INFO|com.alibaba.druid.pool.DruidDataSource|RMI TCP Connection(3)-127.0.0.1|init|947|{dataSource-1} inited
2019-02-25 16:29:37.011|INFO|com.codingapi.tx.framework.utils.SocketManager|pool-11-thread-1|sleepSend|84|send-msg->{"a":"umi","k":"gVo3iqk9","p":{"u":"286bae9563235576a14a2ae8fdd7215a","i":"192.168.4.152:18089","m":"jm-relationship-service"}}
2019-02-25 16:33:47.982|INFO|org.apache.juli.logging.DirectJDKLog|http-nio-18089-exec-1|log|180|Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-02-25 16:33:47.982|INFO|org.springframework.web.servlet.FrameworkServlet|http-nio-18089-exec-1|initServletBean|489|FrameworkServlet 'dispatcherServlet': initialization started
2019-02-25 16:33:48.031|INFO|org.springframework.web.servlet.FrameworkServlet|http-nio-18089-exec-1|initServletBean|508|FrameworkServlet 'dispatcherServlet': initialization completed in 48 ms
2019-02-25 16:34:30.420|INFO|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver|AsyncResolver-bootstrap-executor-0|getClusterEndpoints|43|Resolving eureka endpoints via configuration
2019-02-25 16:37:32.296|INFO|com.sunfield.microframe.common.aop.RestAop|http-nio-18089-exec-10|beforeRest|36|==> START REST: com.sunfield.microframe.rest.RelationshipController#addFriendRequest PARAMS:[{"createBy":null,"createDate":null,"id":null,"pageNumber":0,"pageSize":0,"remarks":null,"status":null,"type":4,"updateBy":null,"updateDate":null,"user":null,"userId":"0e06faa2ca6f4baa8ea262de154759ce","userIdOpposite":"73d8e67676d64dc786dfad06869570ec"}]
2019-02-25 16:37:32.372|DEBUG|org.apache.ibatis.logging.jdbc.BaseJdbcLogger|http-nio-18089-exec-10|debug|145|==>  Preparing: SELECT id AS id, user_id AS userId, user_id_opposite AS userIdOpposite, status AS status, create_by AS createBy, create_date AS createDate, update_by AS updateBy, update_date AS updateDate, remarks AS remarks FROM jm_relationship_friendship WHERE (user_id = ?) AND (user_id_opposite = ?) AND (status = '0') 
2019-02-25 16:37:32.429|DEBUG|org.apache.ibatis.logging.jdbc.BaseJdbcLogger|http-nio-18089-exec-10|debug|145|==> Parameters: 0e06faa2ca6f4baa8ea262de154759ce(String), 73d8e67676d64dc786dfad06869570ec(String)
2019-02-25 16:37:32.442|DEBUG|org.apache.ibatis.logging.jdbc.BaseJdbcLogger|http-nio-18089-exec-10|debug|145|<==      Total: 0
2019-02-25 16:37:32.445|DEBUG|org.apache.ibatis.logging.jdbc.BaseJdbcLogger|http-nio-18089-exec-10|debug|145|==>  Preparing: INSERT INTO jm_relationship_friendship (id, type, user_id, user_id_opposite, status, create_by, create_date, update_by, update_date, remarks) VALUES (?, ?, ?, ?, 0, ?, ?, ?, ?, ?) 
2019-02-25 16:37:32.454|DEBUG|org.apache.ibatis.logging.jdbc.BaseJdbcLogger|http-nio-18089-exec-10|debug|145|==> Parameters: 62d2963f4e9c45d4bef178a78d85ea23(String), 2(Integer), 0e06faa2ca6f4baa8ea262de154759ce(String), 73d8e67676d64dc786dfad06869570ec(String), null, 2019-02-25 16:37:32.443(Timestamp), null, 2019-02-25 16:37:32.443(Timestamp), null
2019-02-25 16:37:32.467|DEBUG|org.apache.ibatis.logging.jdbc.BaseJdbcLogger|http-nio-18089-exec-10|debug|145|<==    Updates: 1
2019-02-25 16:37:32.834|INFO|com.codingapi.tx.springcloud.feign.TransactionRestTemplateInterceptor|hystrix-jm-user-service-1|apply|23|LCN-SpringCloud TxGroup info -> groupId:null
2019-02-25 16:37:32.849|INFO|org.springframework.context.support.AbstractApplicationContext|hystrix-jm-user-service-1|prepareRefresh|583|Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@7d44dc29: startup date [Mon Feb 25 16:37:32 CST 2019]; parent: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@1e5f4170
2019-02-25 16:37:32.932|INFO|org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor|hystrix-jm-user-service-1|<init>|155|JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2019-02-25 16:37:33.156|INFO|com.netflix.config.ChainedDynamicProperty$ChainLink|hystrix-jm-user-service-1|checkAndFlip|115|Flipping property: jm-user-service.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2019-02-25 16:37:33.188|INFO|com.netflix.util.concurrent.ShutdownEnabledTimer|hystrix-jm-user-service-1|<init>|58|Shutdown hook installed for: NFLoadBalancer-PingTimer-jm-user-service
2019-02-25 16:37:33.192|INFO|com.netflix.loadbalancer.BaseLoadBalancer|hystrix-jm-user-service-1|initWithConfig|192|Client: jm-user-service instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=jm-user-service,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
2019-02-25 16:37:33.212|INFO|com.netflix.loadbalancer.DynamicServerListLoadBalancer|hystrix-jm-user-service-1|enableAndInitLearnNewServersFeature|222|Using serverListUpdater PollingServerListUpdater
2019-02-25 16:37:33.218|INFO|com.netflix.loadbalancer.DynamicServerListLoadBalancer|hystrix-jm-user-service-1|restOfInit|150|DynamicServerListLoadBalancer for client jm-user-service initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=jm-user-service,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@472dfd22
2019-02-25 16:37:33.386|INFO|com.codingapi.ribbon.loadbalancer.LcnZoneAwareLoadBalancerProxy|hystrix-jm-user-service-1|chooseServer|28|enter chooseServer method, key:null
2019-02-25 16:37:33.391|INFO|com.codingapi.ribbon.loadbalancer.LcnZoneAwareLoadBalancerProxy|hystrix-jm-user-service-1|chooseServer|28|enter chooseServer method, key:null
2019-02-25 16:37:33.391|INFO|com.codingapi.ribbon.loadbalancer.LcnZoneAwareLoadBalancerProxy|hystrix-jm-user-service-1|chooseServer|28|enter chooseServer method, key:null
2019-02-25 16:37:33.681|INFO|com.sunfield.microframe.common.aop.RestAop|http-nio-18089-exec-10|beforeRest|42|<== END REST: com.sunfield.microframe.rest.RelationshipController#addFriendRequest RETURN:{"data":{"createBy":null,"createDate":"2019-02-25 16:37:32","id":"62d2963f4e9c45d4bef178a78d85ea23","pageNumber":0,"pageSize":0,"remarks":null,"status":null,"type":5,"updateBy":null,"updateDate":"2019-02-25 16:37:32","user":null,"userId":"0e06faa2ca6f4baa8ea262de154759ce","userIdOpposite":"73d8e67676d64dc786dfad06869570ec"},"msg":"请求成功","status":"SUCCESS"} COST TIME:1381ms
2019-02-25 16:39:30.428|INFO|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver|AsyncResolver-bootstrap-executor-0|getClusterEndpoints|43|Resolving eureka endpoints via configuration
2019-02-25 16:44:25.354|INFO|org.springframework.context.support.AbstractApplicationContext|main|prepareRefresh|583|Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@456d6c1e: startup date [Mon Feb 25 16:44:25 CST 2019]; root of context hierarchy
2019-02-25 16:44:25.493|INFO|org.hibernate.validator.internal.util.Version|background-preinit|<clinit>|30|HV000001: Hibernate Validator 5.3.6.Final
2019-02-25 16:44:25.571|INFO|org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor|main|<init>|155|JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2019-02-25 16:44:25.614|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'configurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$38297a6a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 16:44:25.941|INFO|org.springframework.boot.SpringApplication|main|logStartupProfileInfo|593|No active profile set, falling back to default profiles: default
2019-02-25 16:44:25.956|INFO|org.springframework.context.support.AbstractApplicationContext|main|prepareRefresh|583|Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@2b62442c: startup date [Mon Feb 25 16:44:25 CST 2019]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@456d6c1e
2019-02-25 16:44:27.198|INFO|org.springframework.data.repository.config.RepositoryConfigurationDelegate|main|multipleStoresDetected|165|Multiple Spring Data modules found, entering strict repository configuration mode!
2019-02-25 16:44:27.373|INFO|com.ctrip.framework.foundation.internals.provider.DefaultApplicationProvider|main|initAppId|93|App ID is set to jm-relationship-service-v1 by app.id property from /META-INF/app.properties
2019-02-25 16:44:27.374|INFO|com.ctrip.framework.foundation.internals.provider.DefaultServerProvider|main|initEnvType|108|Environment is set to [dev] by JVM system property 'env'.
2019-02-25 16:44:27.523|INFO|org.springframework.cloud.context.scope.GenericScope|main|setSerializationId|288|BeanFactory id=aef2ef56-a824-3d0b-9d96-a0ca4374343d
2019-02-25 16:44:27.572|INFO|com.ctrip.framework.apollo.internals.DefaultMetaServerProvider|main|initMetaServerAddress|42|Located meta services from apollo.meta configuration: http://172.16.175.22:8080!
2019-02-25 16:44:27.574|INFO|com.ctrip.framework.apollo.core.MetaDomainConsts|main|initMetaServerAddress|93|Located meta server address http://172.16.175.22:8080 for env DEV from com.ctrip.framework.apollo.internals.DefaultMetaServerProvider
2019-02-25 16:44:27.692|INFO|org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor|main|<init>|155|JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2019-02-25 16:44:27.749|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'com.sunfield.microframe.feign.JmAppUserFeignService' of type [org.springframework.cloud.netflix.feign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 16:44:27.750|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'com.sunfield.microframe.feign.JmIndustriesFeignService' of type [org.springframework.cloud.netflix.feign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 16:44:27.874|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$1c0f776d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 16:44:28.050|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'redisConfig' of type [com.sunfield.microframe.common.config.RedisConfig$$EnhancerBySpringCGLIB$$e8d05354] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 16:44:28.060|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'org.springframework.cache.annotation.ProxyCachingConfiguration' of type [org.springframework.cache.annotation.ProxyCachingConfiguration$$EnhancerBySpringCGLIB$$6521ad8b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 16:44:28.105|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'org.springframework.cloud.netflix.metrics.MetricsInterceptorConfiguration$MetricsRestTemplateConfiguration' of type [org.springframework.cloud.netflix.metrics.MetricsInterceptorConfiguration$MetricsRestTemplateConfiguration$$EnhancerBySpringCGLIB$$4e3c1dae] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 16:44:28.127|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$38297a6a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 16:44:28.563|INFO|org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer|main|initialize|89|Tomcat initialized with port(s): 18089 (http)
2019-02-25 16:44:28.573|INFO|org.apache.juli.logging.DirectJDKLog|main|log|180|Starting service [Tomcat]
2019-02-25 16:44:28.573|INFO|org.apache.juli.logging.DirectJDKLog|main|log|180|Starting Servlet Engine: Apache Tomcat/8.5.27
2019-02-25 16:44:28.830|INFO|org.apache.juli.logging.DirectJDKLog|localhost-startStop-1|log|180|Initializing Spring embedded WebApplicationContext
2019-02-25 16:44:28.830|INFO|org.springframework.boot.context.embedded.EmbeddedWebApplicationContext|localhost-startStop-1|prepareEmbeddedWebApplicationContext|276|Root WebApplicationContext: initialization completed in 2874 ms
2019-02-25 16:44:29.279|INFO|org.springframework.boot.web.servlet.ServletRegistrationBean|localhost-startStop-1|onStartup|190|Mapping servlet: 'statViewServlet' to [/druid/*]
2019-02-25 16:44:29.281|INFO|org.springframework.boot.web.servlet.ServletRegistrationBean|localhost-startStop-1|onStartup|190|Mapping servlet: 'dispatcherServlet' to [/]
2019-02-25 16:44:29.284|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|258|Mapping filter: 'metricsFilter' to: [/*]
2019-02-25 16:44:29.285|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|258|Mapping filter: 'characterEncodingFilter' to: [/*]
2019-02-25 16:44:29.285|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|258|Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-02-25 16:44:29.285|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|258|Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-02-25 16:44:29.285|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|258|Mapping filter: 'requestContextFilter' to: [/*]
2019-02-25 16:44:29.286|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|258|Mapping filter: 'webRequestLoggingFilter' to: [/*]
2019-02-25 16:44:29.286|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|271|Mapping filter: 'webStatFilter' to urls: [/*]
2019-02-25 16:44:29.286|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|258|Mapping filter: 'applicationContextIdFilter' to: [/*]
2019-02-25 16:44:29.757|INFO|org.springframework.aop.framework.CglibAopProxy|main|doValidateClass|268|Final method [private final void com.alibaba.druid.pool.DruidDataSource.decrementPoolingCount()] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.
2019-02-25 16:44:29.758|INFO|org.springframework.aop.framework.CglibAopProxy|main|doValidateClass|268|Final method [private final void com.alibaba.druid.pool.DruidDataSource.incrementPoolingCount()] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.
2019-02-25 16:44:29.758|INFO|org.springframework.aop.framework.CglibAopProxy|main|doValidateClass|268|Final method [protected final void com.alibaba.druid.pool.DruidDataSource.handleFatalError(com.alibaba.druid.pool.DruidPooledConnection,java.sql.SQLException,java.lang.String) throws java.sql.SQLException] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.
2019-02-25 16:44:30.043|INFO|org.springframework.context.support.AbstractApplicationContext|main|prepareRefresh|583|Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@69ffdaa8: startup date [Mon Feb 25 16:44:30 CST 2019]; parent: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@2b62442c
2019-02-25 16:44:30.060|INFO|org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor|main|<init>|155|JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2019-02-25 16:44:31.031|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/rejectFriendRequest],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<com.sunfield.microframe.domain.JmRelationshipFriendship> com.sunfield.microframe.rest.RelationshipController.rejectFriendRequest(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 16:44:31.032|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/findFriendRequestsOppsite],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<java.util.List<com.sunfield.microframe.domain.JmRelationshipFriendship>> com.sunfield.microframe.rest.RelationshipController.findFriendRequestsOppsite(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 16:44:31.032|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/findFriendRequestsOppsitePage],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<com.sunfield.microframe.common.response.Page<com.sunfield.microframe.domain.JmRelationshipFriendship>> com.sunfield.microframe.rest.RelationshipController.findFriendRequestsOppsitePage(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 16:44:31.033|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/removeFriend],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<com.sunfield.microframe.domain.JmRelationshipFriendship> com.sunfield.microframe.rest.RelationshipController.removeFriend(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 16:44:31.033|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/addFriendRequest],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<com.sunfield.microframe.domain.JmRelationshipFriendship> com.sunfield.microframe.rest.RelationshipController.addFriendRequest(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 16:44:31.034|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/agreeAsAFriend],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<com.sunfield.microframe.domain.JmRelationshipFriendship> com.sunfield.microframe.rest.RelationshipController.agreeAsAFriend(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 16:44:31.034|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/findFriendRecord],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<com.sunfield.microframe.domain.JmRelationshipFriendship> com.sunfield.microframe.rest.RelationshipController.findFriendRecord(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 16:44:31.034|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/findFriends],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<java.util.List<com.sunfield.microframe.domain.JmRelationshipFriendship>> com.sunfield.microframe.rest.RelationshipController.findFriends(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 16:44:31.035|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/findFriendsPage],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<com.sunfield.microframe.common.response.Page<com.sunfield.microframe.domain.JmRelationshipFriendship>> com.sunfield.microframe.rest.RelationshipController.findFriendsPage(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 16:44:31.039|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/swagger-resources/configuration/security]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-02-25 16:44:31.039|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/swagger-resources]}" onto public org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-02-25 16:44:31.040|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/swagger-resources/configuration/ui]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-02-25 16:44:31.043|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-02-25 16:44:31.044|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-02-25 16:44:31.088|WARN|com.netflix.config.sources.URLConfigurationSource|main|<init>|121|No URLs will be polled as dynamic configuration sources.
2019-02-25 16:44:31.089|INFO|com.netflix.config.sources.URLConfigurationSource|main|<init>|122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2019-02-25 16:44:31.093|INFO|com.netflix.config.DynamicPropertyFactory|main|getInstance|281|DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@34b2d51a
2019-02-25 16:44:32.039|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/auditevents || /auditevents.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public org.springframework.http.ResponseEntity<?> org.springframework.boot.actuate.endpoint.mvc.AuditEventsMvcEndpoint.findByPrincipalAndAfterAndType(java.lang.String,java.util.Date,java.lang.String)
2019-02-25 16:44:32.041|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/metrics/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint.value(java.lang.String)
2019-02-25 16:44:32.042|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/metrics || /metrics.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:44:32.042|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/configprops || /configprops.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:44:32.043|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/features || /features.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:44:32.044|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/dump || /dump.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:44:32.045|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/refresh || /refresh.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke()
2019-02-25 16:44:32.046|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/heapdump || /heapdump.json],methods=[GET],produces=[application/octet-stream]}" onto public void org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint.invoke(boolean,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.io.IOException,javax.servlet.ServletException
2019-02-25 16:44:32.047|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/mappings || /mappings.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:44:32.047|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/env],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.context.environment.EnvironmentManagerMvcEndpoint.value(java.util.Map<java.lang.String, java.lang.String>)
2019-02-25 16:44:32.047|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/env/reset],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> org.springframework.cloud.context.environment.EnvironmentManagerMvcEndpoint.reset()
2019-02-25 16:44:32.048|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/env/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EnvironmentMvcEndpoint.value(java.lang.String)
2019-02-25 16:44:32.049|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/env || /env.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:44:32.049|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/info || /info.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:44:32.050|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/hystrix.stream/**]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.cloud.netflix.endpoint.ServletWrappingEndpoint.handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-02-25 16:44:32.050|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/health || /health.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint.invoke(javax.servlet.http.HttpServletRequest,java.security.Principal)
2019-02-25 16:44:32.051|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/service-registry/instance-status],methods=[GET]}" onto public org.springframework.http.ResponseEntity org.springframework.cloud.client.serviceregistry.endpoint.ServiceRegistryEndpoint.getStatus()
2019-02-25 16:44:32.051|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/service-registry/instance-status],methods=[POST]}" onto public org.springframework.http.ResponseEntity<?> org.springframework.cloud.client.serviceregistry.endpoint.ServiceRegistryEndpoint.setStatus(java.lang.String)
2019-02-25 16:44:32.051|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/beans || /beans.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:44:32.053|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/loggers/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.LoggersMvcEndpoint.get(java.lang.String)
2019-02-25 16:44:32.053|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/loggers/{name:.*}],methods=[POST],consumes=[application/vnd.spring-boot.actuator.v1+json || application/json],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.LoggersMvcEndpoint.set(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)
2019-02-25 16:44:32.054|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/loggers || /loggers.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:44:32.054|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/archaius || /archaius.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:44:32.055|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/trace || /trace.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:44:32.055|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/autoconfig || /autoconfig.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:44:32.271|INFO|springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping|main|initHandlerMethods|69|Mapped URL path [/v2/api-docs] onto method [public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)]
2019-02-25 16:44:32.552|WARN|com.netflix.config.sources.URLConfigurationSource|main|<init>|121|No URLs will be polled as dynamic configuration sources.
2019-02-25 16:44:32.553|INFO|com.netflix.config.sources.URLConfigurationSource|main|<init>|122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2019-02-25 16:44:32.755|INFO|org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter|main|initControllerAdviceCache|534|Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@2b62442c: startup date [Mon Feb 25 16:44:25 CST 2019]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@456d6c1e
2019-02-25 16:44:32.838|INFO|org.springframework.web.servlet.handler.AbstractUrlHandlerMapping|main|registerHandler|362|Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 16:44:32.838|INFO|org.springframework.web.servlet.handler.AbstractUrlHandlerMapping|main|registerHandler|362|Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 16:44:32.900|INFO|org.springframework.web.servlet.handler.AbstractUrlHandlerMapping|main|registerHandler|362|Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 16:44:33.431|INFO|org.springframework.ui.freemarker.SpringTemplateLoader|main|<init>|61|SpringTemplateLoader for FreeMarker: using resource loader [org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@2b62442c: startup date [Mon Feb 25 16:44:25 CST 2019]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@456d6c1e] and template loader path [classpath:/templates/]
2019-02-25 16:44:33.432|INFO|org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer|main|postProcessTemplateLoaders|127|ClassTemplateLoader for Spring macros added to FreeMarker configuration
2019-02-25 16:44:33.858|INFO|org.springframework.jmx.export.MBeanExporter|main|afterSingletonsInstantiated|431|Registering beans for JMX exposure on startup
2019-02-25 16:44:33.859|INFO|org.springframework.jmx.export.MBeanExporter|main|autodetect|916|Bean with name 'druidDataSource' has been autodetected for JMX exposure
2019-02-25 16:44:33.870|INFO|org.springframework.jmx.export.MBeanExporter|main|autodetect|916|Bean with name 'configurationPropertiesRebinder' has been autodetected for JMX exposure
2019-02-25 16:44:33.871|INFO|org.springframework.jmx.export.MBeanExporter|main|autodetect|916|Bean with name 'refreshEndpoint' has been autodetected for JMX exposure
2019-02-25 16:44:33.871|INFO|org.springframework.jmx.export.MBeanExporter|main|autodetect|916|Bean with name 'environmentManager' has been autodetected for JMX exposure
2019-02-25 16:44:33.872|INFO|org.springframework.jmx.export.MBeanExporter|main|autodetect|916|Bean with name 'serviceRegistryEndpoint' has been autodetected for JMX exposure
2019-02-25 16:44:33.873|INFO|org.springframework.jmx.export.MBeanExporter|main|autodetect|916|Bean with name 'refreshScope' has been autodetected for JMX exposure
2019-02-25 16:44:33.876|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'environmentManager': registering with JMX server as MBean [org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager]
2019-02-25 16:44:33.888|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'serviceRegistryEndpoint': registering with JMX server as MBean [org.springframework.cloud.client.serviceregistry.endpoint:name=serviceRegistryEndpoint,type=ServiceRegistryEndpoint]
2019-02-25 16:44:33.895|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'refreshScope': registering with JMX server as MBean [org.springframework.cloud.context.scope.refresh:name=refreshScope,type=RefreshScope]
2019-02-25 16:44:33.907|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'configurationPropertiesRebinder': registering with JMX server as MBean [org.springframework.cloud.context.properties:name=configurationPropertiesRebinder,context=2b62442c,type=ConfigurationPropertiesRebinder]
2019-02-25 16:44:33.912|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'refreshEndpoint': registering with JMX server as MBean [org.springframework.cloud.endpoint:name=refreshEndpoint,type=RefreshEndpoint]
2019-02-25 16:44:33.917|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|671|Located MBean 'druidDataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=druidDataSource,type=DruidDataSource]
2019-02-25 16:44:33.941|INFO|org.springframework.jmx.export.MBeanExporter|main|afterSingletonsInstantiated|431|Registering beans for JMX exposure on startup
2019-02-25 16:44:33.954|INFO|org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup|main|start|343|Starting beans in phase 0
2019-02-25 16:44:33.961|INFO|org.springframework.cloud.netflix.eureka.InstanceInfoFactory|main|create|71|Setting initial instance status as: STARTING
2019-02-25 16:44:33.988|INFO|com.netflix.discovery.DiscoveryClient|main|<init>|347|Initializing Eureka in region us-east-1
2019-02-25 16:44:34.259|INFO|com.netflix.discovery.provider.DiscoveryJerseyProvider|main|<init>|70|Using JSON encoding codec LegacyJacksonJson
2019-02-25 16:44:34.260|INFO|com.netflix.discovery.provider.DiscoveryJerseyProvider|main|<init>|71|Using JSON decoding codec LegacyJacksonJson
2019-02-25 16:44:34.367|INFO|com.netflix.discovery.provider.DiscoveryJerseyProvider|main|<init>|80|Using XML encoding codec XStreamXml
2019-02-25 16:44:34.368|INFO|com.netflix.discovery.provider.DiscoveryJerseyProvider|main|<init>|81|Using XML decoding codec XStreamXml
2019-02-25 16:44:34.589|INFO|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver|main|getClusterEndpoints|43|Resolving eureka endpoints via configuration
2019-02-25 16:44:34.636|INFO|com.netflix.discovery.DiscoveryClient|main|fetchRegistry|934|Disable delta property : false
2019-02-25 16:44:34.636|INFO|com.netflix.discovery.DiscoveryClient|main|fetchRegistry|935|Single vip registry refresh property : null
2019-02-25 16:44:34.636|INFO|com.netflix.discovery.DiscoveryClient|main|fetchRegistry|936|Force full registry fetch : false
2019-02-25 16:44:34.636|INFO|com.netflix.discovery.DiscoveryClient|main|fetchRegistry|937|Application is null : false
2019-02-25 16:44:34.637|INFO|com.netflix.discovery.DiscoveryClient|main|fetchRegistry|938|Registered Applications size is zero : true
2019-02-25 16:44:34.637|INFO|com.netflix.discovery.DiscoveryClient|main|fetchRegistry|940|Application version is -1: true
2019-02-25 16:44:34.637|INFO|com.netflix.discovery.DiscoveryClient|main|getAndStoreFullRegistry|1023|Getting all instance registry info from the eureka server
2019-02-25 16:44:34.779|INFO|com.netflix.discovery.DiscoveryClient|main|getAndStoreFullRegistry|1032|The response status is 200
2019-02-25 16:44:34.780|INFO|com.netflix.discovery.DiscoveryClient|main|initScheduledTasks|1258|Starting heartbeat executor: renew interval is: 30
2019-02-25 16:44:34.782|INFO|com.netflix.discovery.InstanceInfoReplicator|main|<init>|59|InstanceInfoReplicator onDemand update allowed rate per min is 4
2019-02-25 16:44:34.784|INFO|com.netflix.discovery.DiscoveryClient|main|<init>|434|Discovery Client initialized at timestamp 1551084274784 with initial instances count: 12
2019-02-25 16:44:34.804|INFO|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry|main|register|40|Registering application jm-relationship-service with eureka with status UP
2019-02-25 16:44:34.806|INFO|com.netflix.discovery.DiscoveryClient$3|main|notify|1293|Saw local status change event StatusChangeEvent [timestamp=1551084274806, current=UP, previous=STARTING]
2019-02-25 16:44:34.809|INFO|com.netflix.discovery.DiscoveryClient|DiscoveryClient-InstanceInfoReplicator-0|register|804|DiscoveryClient_JM-RELATIONSHIP-SERVICE/192.168.4.152:18089: registering service...
2019-02-25 16:44:34.818|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'auditEventsEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=auditEventsEndpoint]
2019-02-25 16:44:34.836|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'archaiusEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=archaiusEndpoint]
2019-02-25 16:44:34.852|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'featuresEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=featuresEndpoint]
2019-02-25 16:44:34.856|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'requestMappingEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=requestMappingEndpoint]
2019-02-25 16:44:34.859|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'environmentEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=environmentEndpoint]
2019-02-25 16:44:34.868|INFO|com.netflix.discovery.DiscoveryClient|DiscoveryClient-InstanceInfoReplicator-0|register|813|DiscoveryClient_JM-RELATIONSHIP-SERVICE/192.168.4.152:18089 - registration status: 204
2019-02-25 16:44:34.868|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'healthEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=healthEndpoint]
2019-02-25 16:44:34.872|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'beansEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=beansEndpoint]
2019-02-25 16:44:34.876|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'infoEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=infoEndpoint]
2019-02-25 16:44:34.884|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'loggersEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=loggersEndpoint]
2019-02-25 16:44:34.894|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'metricsEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=metricsEndpoint]
2019-02-25 16:44:34.903|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'traceEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=traceEndpoint]
2019-02-25 16:44:34.905|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'dumpEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=dumpEndpoint]
2019-02-25 16:44:34.909|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'autoConfigurationReportEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=autoConfigurationReportEndpoint]
2019-02-25 16:44:34.915|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'configurationPropertiesReportEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=configurationPropertiesReportEndpoint]
2019-02-25 16:44:34.917|INFO|org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup|main|start|343|Starting beans in phase 2147483647
2019-02-25 16:44:34.918|INFO|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper|main|start|151|Context refreshed
2019-02-25 16:44:34.926|INFO|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper|main|start|154|Found 1 custom documentation plugin(s)
2019-02-25 16:44:34.957|INFO|springfox.documentation.spring.web.scanners.ApiListingReferenceScanner|main|scan|41|Scanning for api listing references
2019-02-25 16:44:35.198|INFO|org.springframework.cloud.netflix.hystrix.HystrixCircuitBreakerConfiguration$HystrixMetricsPollerConfiguration|main|start|138|Starting poller
2019-02-25 16:44:35.222|INFO|org.apache.juli.logging.DirectJDKLog|main|log|180|Initializing ProtocolHandler ["http-nio-18089"]
2019-02-25 16:44:35.228|INFO|org.apache.juli.logging.DirectJDKLog|main|log|180|Starting ProtocolHandler ["http-nio-18089"]
2019-02-25 16:44:35.239|INFO|org.apache.juli.logging.DirectJDKLog|main|log|180|Using a shared selector for servlet write/read
2019-02-25 16:44:35.256|INFO|org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer|main|start|201|Tomcat started on port(s): 18089 (http)
2019-02-25 16:44:35.257|INFO|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration|main|onApplicationEvent|124|Updating port to 18089
2019-02-25 16:44:35.257|INFO|com.codingapi.tx.springcloud.listener.ServerListener|main|onApplicationEvent|24|onApplicationEvent -> onApplicationEvent. org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer@6bfc5296
2019-02-25 16:44:35.261|INFO|com.codingapi.tx.netty.service.TxManagerHttpRequestHelper|main|reloadHttpRequestService|47|load HttpRequestService .
2019-02-25 16:44:35.262|INFO|com.sunfield.microframe.common.config.TxManagerHttpRequestServiceImpl|main|httpGet|18|httpGet start
2019-02-25 16:44:35.705|INFO|com.sunfield.microframe.common.config.TxManagerHttpRequestServiceImpl|main|httpGet|20|httpGet end,res is {"ip":"172.16.175.24","port":9999,"heart":15,"delay":5,"compensateMaxWaitTime":5000}

2019-02-25 16:44:35.705|INFO|com.codingapi.tx.netty.service.impl.NettyDistributeServiceImpl|main|getTxServer|43|get txManager ->{"ip":"172.16.175.24","port":9999,"heart":15,"delay":5,"compensateMaxWaitTime":5000}

2019-02-25 16:44:35.709|INFO|com.codingapi.tx.netty.service.impl.NettyDistributeServiceImpl|main|getTxServer|57|host:172.16.175.24,port:9999,heart:15,delay:5,compensateMaxWaitTime:5000
2019-02-25 16:44:35.709|INFO|com.codingapi.tx.netty.service.impl.NettyDistributeServiceImpl|main|getTxServer|59|host:172.16.175.24,port:9999,heart:15,delay:5,compensateMaxWaitTime:5000
2019-02-25 16:44:36.079|INFO|com.codingapi.tx.netty.service.impl.NettyServiceImpl|main|start|85|connection txManager-socket-> host:172.16.175.24,port:9999
2019-02-25 16:44:36.110|INFO|com.codingapi.tx.listener.service.impl.InitServiceImpl|main|start|25|socket-start..
2019-02-25 16:44:36.117|INFO|org.springframework.boot.StartupInfoLogger|main|logStarted|57|Started ServiceApplication in 11.195 seconds (JVM running for 12.651)
2019-02-25 16:44:36.124|INFO|com.codingapi.tx.netty.handler.TransactionHandler|nioEventLoopGroup-2-1|channelActive|87|connection -->io.netty.channel.DefaultChannelHandlerContext@763bad30
2019-02-25 16:44:36.752|INFO|com.alibaba.druid.pool.DruidDataSource|RMI TCP Connection(5)-127.0.0.1|init|947|{dataSource-1} inited
2019-02-25 16:44:41.146|INFO|com.codingapi.tx.framework.utils.SocketManager|pool-11-thread-1|sleepSend|84|send-msg->{"a":"umi","k":"kwcFgy3T","p":{"u":"286bae9563235576a14a2ae8fdd7215a","i":"192.168.4.152:18089","m":"jm-relationship-service"}}
2019-02-25 16:45:22.182|INFO|org.apache.juli.logging.DirectJDKLog|http-nio-18089-exec-1|log|180|Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-02-25 16:45:22.182|INFO|org.springframework.web.servlet.FrameworkServlet|http-nio-18089-exec-1|initServletBean|489|FrameworkServlet 'dispatcherServlet': initialization started
2019-02-25 16:45:22.219|INFO|org.springframework.web.servlet.FrameworkServlet|http-nio-18089-exec-1|initServletBean|508|FrameworkServlet 'dispatcherServlet': initialization completed in 37 ms
2019-02-25 16:46:04.335|INFO|com.sunfield.microframe.common.aop.RestAop|http-nio-18089-exec-6|beforeRest|36|==> START REST: com.sunfield.microframe.rest.RelationshipController#findFriendRecord PARAMS:[{"createBy":null,"createDate":null,"id":null,"pageNumber":0,"pageSize":0,"remarks":null,"status":null,"type":4,"updateBy":null,"updateDate":null,"user":null,"userId":"0e06faa2ca6f4baa8ea262de154759ce","userIdOpposite":"73d8e67676d64dc786dfad06869570ec"}]
2019-02-25 16:46:04.378|DEBUG|org.apache.ibatis.logging.jdbc.BaseJdbcLogger|http-nio-18089-exec-6|debug|145|==>  Preparing: SELECT id AS id, user_id AS userId, user_id_opposite AS userIdOpposite, status AS status, create_by AS createBy, create_date AS createDate, update_by AS updateBy, update_date AS updateDate, remarks AS remarks FROM jm_relationship_friendship WHERE (user_id = ?) AND (user_id_opposite = ?) AND (status = '0') 
2019-02-25 16:46:04.420|DEBUG|org.apache.ibatis.logging.jdbc.BaseJdbcLogger|http-nio-18089-exec-6|debug|145|==> Parameters: 0e06faa2ca6f4baa8ea262de154759ce(String), 73d8e67676d64dc786dfad06869570ec(String)
2019-02-25 16:46:04.434|DEBUG|org.apache.ibatis.logging.jdbc.BaseJdbcLogger|http-nio-18089-exec-6|debug|145|<==      Total: 1
2019-02-25 16:46:04.439|INFO|com.sunfield.microframe.common.aop.RestAop|http-nio-18089-exec-6|beforeRest|42|<== END REST: com.sunfield.microframe.rest.RelationshipController#findFriendRecord RETURN:{"data":{"createBy":null,"createDate":"2019-02-25 16:37:32","id":"62d2963f4e9c45d4bef178a78d85ea23","pageNumber":0,"pageSize":0,"remarks":null,"status":"0","type":4,"updateBy":null,"updateDate":"2019-02-25 16:37:32","user":null,"userId":"0e06faa2ca6f4baa8ea262de154759ce","userIdOpposite":"73d8e67676d64dc786dfad06869570ec"},"msg":"请求成功","status":"SUCCESS"} COST TIME:99ms
2019-02-25 16:49:52.953|INFO|org.springframework.context.support.AbstractApplicationContext|main|prepareRefresh|583|Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@456d6c1e: startup date [Mon Feb 25 16:49:52 CST 2019]; root of context hierarchy
2019-02-25 16:49:53.117|INFO|org.hibernate.validator.internal.util.Version|background-preinit|<clinit>|30|HV000001: Hibernate Validator 5.3.6.Final
2019-02-25 16:49:53.212|INFO|org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor|main|<init>|155|JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2019-02-25 16:49:53.267|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'configurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$38297a6a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 16:49:53.632|INFO|org.springframework.boot.SpringApplication|main|logStartupProfileInfo|593|No active profile set, falling back to default profiles: default
2019-02-25 16:49:53.650|INFO|org.springframework.context.support.AbstractApplicationContext|main|prepareRefresh|583|Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@2b62442c: startup date [Mon Feb 25 16:49:53 CST 2019]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@456d6c1e
2019-02-25 16:49:54.913|INFO|org.springframework.data.repository.config.RepositoryConfigurationDelegate|main|multipleStoresDetected|165|Multiple Spring Data modules found, entering strict repository configuration mode!
2019-02-25 16:49:55.101|INFO|com.ctrip.framework.foundation.internals.provider.DefaultApplicationProvider|main|initAppId|93|App ID is set to jm-relationship-service-v1 by app.id property from /META-INF/app.properties
2019-02-25 16:49:55.103|INFO|com.ctrip.framework.foundation.internals.provider.DefaultServerProvider|main|initEnvType|108|Environment is set to [dev] by JVM system property 'env'.
2019-02-25 16:49:55.258|INFO|org.springframework.cloud.context.scope.GenericScope|main|setSerializationId|288|BeanFactory id=aef2ef56-a824-3d0b-9d96-a0ca4374343d
2019-02-25 16:49:55.308|INFO|com.ctrip.framework.apollo.internals.DefaultMetaServerProvider|main|initMetaServerAddress|42|Located meta services from apollo.meta configuration: http://172.16.175.22:8080!
2019-02-25 16:49:55.311|INFO|com.ctrip.framework.apollo.core.MetaDomainConsts|main|initMetaServerAddress|93|Located meta server address http://172.16.175.22:8080 for env DEV from com.ctrip.framework.apollo.internals.DefaultMetaServerProvider
2019-02-25 16:49:55.435|INFO|org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor|main|<init>|155|JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2019-02-25 16:49:55.496|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'com.sunfield.microframe.feign.JmAppUserFeignService' of type [org.springframework.cloud.netflix.feign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 16:49:55.497|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'com.sunfield.microframe.feign.JmIndustriesFeignService' of type [org.springframework.cloud.netflix.feign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 16:49:55.625|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$1c0f776d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 16:49:55.799|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'redisConfig' of type [com.sunfield.microframe.common.config.RedisConfig$$EnhancerBySpringCGLIB$$e8d05354] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 16:49:55.810|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'org.springframework.cache.annotation.ProxyCachingConfiguration' of type [org.springframework.cache.annotation.ProxyCachingConfiguration$$EnhancerBySpringCGLIB$$6521ad8b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 16:49:55.863|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'org.springframework.cloud.netflix.metrics.MetricsInterceptorConfiguration$MetricsRestTemplateConfiguration' of type [org.springframework.cloud.netflix.metrics.MetricsInterceptorConfiguration$MetricsRestTemplateConfiguration$$EnhancerBySpringCGLIB$$4e3c1dae] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 16:49:55.903|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$38297a6a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 16:49:56.372|INFO|org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer|main|initialize|89|Tomcat initialized with port(s): 18089 (http)
2019-02-25 16:49:56.382|INFO|org.apache.juli.logging.DirectJDKLog|main|log|180|Starting service [Tomcat]
2019-02-25 16:49:56.383|INFO|org.apache.juli.logging.DirectJDKLog|main|log|180|Starting Servlet Engine: Apache Tomcat/8.5.27
2019-02-25 16:49:56.646|INFO|org.apache.juli.logging.DirectJDKLog|localhost-startStop-1|log|180|Initializing Spring embedded WebApplicationContext
2019-02-25 16:49:56.647|INFO|org.springframework.boot.context.embedded.EmbeddedWebApplicationContext|localhost-startStop-1|prepareEmbeddedWebApplicationContext|276|Root WebApplicationContext: initialization completed in 2997 ms
2019-02-25 16:49:57.104|INFO|org.springframework.boot.web.servlet.ServletRegistrationBean|localhost-startStop-1|onStartup|190|Mapping servlet: 'statViewServlet' to [/druid/*]
2019-02-25 16:49:57.106|INFO|org.springframework.boot.web.servlet.ServletRegistrationBean|localhost-startStop-1|onStartup|190|Mapping servlet: 'dispatcherServlet' to [/]
2019-02-25 16:49:57.110|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|258|Mapping filter: 'metricsFilter' to: [/*]
2019-02-25 16:49:57.110|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|258|Mapping filter: 'characterEncodingFilter' to: [/*]
2019-02-25 16:49:57.111|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|258|Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-02-25 16:49:57.111|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|258|Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-02-25 16:49:57.111|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|258|Mapping filter: 'requestContextFilter' to: [/*]
2019-02-25 16:49:57.111|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|258|Mapping filter: 'webRequestLoggingFilter' to: [/*]
2019-02-25 16:49:57.111|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|271|Mapping filter: 'webStatFilter' to urls: [/*]
2019-02-25 16:49:57.111|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|258|Mapping filter: 'applicationContextIdFilter' to: [/*]
2019-02-25 16:49:57.562|INFO|org.springframework.aop.framework.CglibAopProxy|main|doValidateClass|268|Final method [protected final void com.alibaba.druid.pool.DruidDataSource.handleFatalError(com.alibaba.druid.pool.DruidPooledConnection,java.sql.SQLException,java.lang.String) throws java.sql.SQLException] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.
2019-02-25 16:49:57.563|INFO|org.springframework.aop.framework.CglibAopProxy|main|doValidateClass|268|Final method [private final void com.alibaba.druid.pool.DruidDataSource.decrementPoolingCount()] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.
2019-02-25 16:49:57.563|INFO|org.springframework.aop.framework.CglibAopProxy|main|doValidateClass|268|Final method [private final void com.alibaba.druid.pool.DruidDataSource.incrementPoolingCount()] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.
2019-02-25 16:49:57.824|INFO|org.springframework.context.support.AbstractApplicationContext|main|prepareRefresh|583|Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@69ffdaa8: startup date [Mon Feb 25 16:49:57 CST 2019]; parent: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@2b62442c
2019-02-25 16:49:57.842|INFO|org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor|main|<init>|155|JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2019-02-25 16:49:58.888|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/removeFriend],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<com.sunfield.microframe.domain.JmRelationshipFriendship> com.sunfield.microframe.rest.RelationshipController.removeFriend(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 16:49:58.889|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/addFriendRequest],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<com.sunfield.microframe.domain.JmRelationshipFriendship> com.sunfield.microframe.rest.RelationshipController.addFriendRequest(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 16:49:58.890|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/agreeAsAFriend],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<com.sunfield.microframe.domain.JmRelationshipFriendship> com.sunfield.microframe.rest.RelationshipController.agreeAsAFriend(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 16:49:58.890|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/findFriendRecord],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<com.sunfield.microframe.domain.JmRelationshipFriendship> com.sunfield.microframe.rest.RelationshipController.findFriendRecord(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 16:49:58.890|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/findFriends],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<java.util.List<com.sunfield.microframe.domain.JmRelationshipFriendship>> com.sunfield.microframe.rest.RelationshipController.findFriends(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 16:49:58.891|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/findFriendsPage],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<com.sunfield.microframe.common.response.Page<com.sunfield.microframe.domain.JmRelationshipFriendship>> com.sunfield.microframe.rest.RelationshipController.findFriendsPage(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 16:49:58.891|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/rejectFriendRequest],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<com.sunfield.microframe.domain.JmRelationshipFriendship> com.sunfield.microframe.rest.RelationshipController.rejectFriendRequest(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 16:49:58.892|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/findFriendRequestsOppsite],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<java.util.List<com.sunfield.microframe.domain.JmRelationshipFriendship>> com.sunfield.microframe.rest.RelationshipController.findFriendRequestsOppsite(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 16:49:58.892|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/findFriendRequestsOppsitePage],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<com.sunfield.microframe.common.response.Page<com.sunfield.microframe.domain.JmRelationshipFriendship>> com.sunfield.microframe.rest.RelationshipController.findFriendRequestsOppsitePage(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 16:49:58.895|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/swagger-resources]}" onto public org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-02-25 16:49:58.896|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/swagger-resources/configuration/ui]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-02-25 16:49:58.897|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/swagger-resources/configuration/security]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-02-25 16:49:58.900|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-02-25 16:49:58.900|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-02-25 16:49:58.946|WARN|com.netflix.config.sources.URLConfigurationSource|main|<init>|121|No URLs will be polled as dynamic configuration sources.
2019-02-25 16:49:58.947|INFO|com.netflix.config.sources.URLConfigurationSource|main|<init>|122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2019-02-25 16:49:58.950|INFO|com.netflix.config.DynamicPropertyFactory|main|getInstance|281|DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@34b2d51a
2019-02-25 16:49:59.938|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/auditevents || /auditevents.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public org.springframework.http.ResponseEntity<?> org.springframework.boot.actuate.endpoint.mvc.AuditEventsMvcEndpoint.findByPrincipalAndAfterAndType(java.lang.String,java.util.Date,java.lang.String)
2019-02-25 16:49:59.940|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/metrics/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint.value(java.lang.String)
2019-02-25 16:49:59.940|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/metrics || /metrics.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:49:59.941|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/configprops || /configprops.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:49:59.942|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/features || /features.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:49:59.942|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/dump || /dump.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:49:59.944|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/refresh || /refresh.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke()
2019-02-25 16:49:59.945|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/heapdump || /heapdump.json],methods=[GET],produces=[application/octet-stream]}" onto public void org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint.invoke(boolean,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.io.IOException,javax.servlet.ServletException
2019-02-25 16:49:59.945|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/mappings || /mappings.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:49:59.946|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/env],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.context.environment.EnvironmentManagerMvcEndpoint.value(java.util.Map<java.lang.String, java.lang.String>)
2019-02-25 16:49:59.946|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/env/reset],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> org.springframework.cloud.context.environment.EnvironmentManagerMvcEndpoint.reset()
2019-02-25 16:49:59.947|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/env/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EnvironmentMvcEndpoint.value(java.lang.String)
2019-02-25 16:49:59.948|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/env || /env.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:49:59.948|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/info || /info.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:49:59.949|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/hystrix.stream/**]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.cloud.netflix.endpoint.ServletWrappingEndpoint.handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-02-25 16:49:59.949|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/health || /health.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint.invoke(javax.servlet.http.HttpServletRequest,java.security.Principal)
2019-02-25 16:49:59.950|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/service-registry/instance-status],methods=[GET]}" onto public org.springframework.http.ResponseEntity org.springframework.cloud.client.serviceregistry.endpoint.ServiceRegistryEndpoint.getStatus()
2019-02-25 16:49:59.950|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/service-registry/instance-status],methods=[POST]}" onto public org.springframework.http.ResponseEntity<?> org.springframework.cloud.client.serviceregistry.endpoint.ServiceRegistryEndpoint.setStatus(java.lang.String)
2019-02-25 16:49:59.951|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/beans || /beans.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:49:59.952|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/loggers/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.LoggersMvcEndpoint.get(java.lang.String)
2019-02-25 16:49:59.953|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/loggers/{name:.*}],methods=[POST],consumes=[application/vnd.spring-boot.actuator.v1+json || application/json],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.LoggersMvcEndpoint.set(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)
2019-02-25 16:49:59.953|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/loggers || /loggers.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:49:59.953|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/archaius || /archaius.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:49:59.954|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/trace || /trace.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:49:59.954|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/autoconfig || /autoconfig.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 16:50:00.215|INFO|springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping|main|initHandlerMethods|69|Mapped URL path [/v2/api-docs] onto method [public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)]
2019-02-25 16:50:00.463|WARN|com.netflix.config.sources.URLConfigurationSource|main|<init>|121|No URLs will be polled as dynamic configuration sources.
2019-02-25 16:50:00.463|INFO|com.netflix.config.sources.URLConfigurationSource|main|<init>|122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2019-02-25 16:50:00.676|INFO|org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter|main|initControllerAdviceCache|534|Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@2b62442c: startup date [Mon Feb 25 16:49:53 CST 2019]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@456d6c1e
2019-02-25 16:50:00.762|INFO|org.springframework.web.servlet.handler.AbstractUrlHandlerMapping|main|registerHandler|362|Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 16:50:00.762|INFO|org.springframework.web.servlet.handler.AbstractUrlHandlerMapping|main|registerHandler|362|Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 16:50:00.827|INFO|org.springframework.web.servlet.handler.AbstractUrlHandlerMapping|main|registerHandler|362|Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 16:50:01.384|INFO|org.springframework.ui.freemarker.SpringTemplateLoader|main|<init>|61|SpringTemplateLoader for FreeMarker: using resource loader [org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@2b62442c: startup date [Mon Feb 25 16:49:53 CST 2019]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@456d6c1e] and template loader path [classpath:/templates/]
2019-02-25 16:50:01.385|INFO|org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer|main|postProcessTemplateLoaders|127|ClassTemplateLoader for Spring macros added to FreeMarker configuration
2019-02-25 16:50:01.819|INFO|org.springframework.jmx.export.MBeanExporter|main|afterSingletonsInstantiated|431|Registering beans for JMX exposure on startup
2019-02-25 16:50:01.821|INFO|org.springframework.jmx.export.MBeanExporter|main|autodetect|916|Bean with name 'druidDataSource' has been autodetected for JMX exposure
2019-02-25 16:50:01.834|INFO|org.springframework.jmx.export.MBeanExporter|main|autodetect|916|Bean with name 'configurationPropertiesRebinder' has been autodetected for JMX exposure
2019-02-25 16:50:01.834|INFO|org.springframework.jmx.export.MBeanExporter|main|autodetect|916|Bean with name 'refreshEndpoint' has been autodetected for JMX exposure
2019-02-25 16:50:01.835|INFO|org.springframework.jmx.export.MBeanExporter|main|autodetect|916|Bean with name 'environmentManager' has been autodetected for JMX exposure
2019-02-25 16:50:01.836|INFO|org.springframework.jmx.export.MBeanExporter|main|autodetect|916|Bean with name 'serviceRegistryEndpoint' has been autodetected for JMX exposure
2019-02-25 16:50:01.837|INFO|org.springframework.jmx.export.MBeanExporter|main|autodetect|916|Bean with name 'refreshScope' has been autodetected for JMX exposure
2019-02-25 16:50:01.840|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'environmentManager': registering with JMX server as MBean [org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager]
2019-02-25 16:50:01.853|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'serviceRegistryEndpoint': registering with JMX server as MBean [org.springframework.cloud.client.serviceregistry.endpoint:name=serviceRegistryEndpoint,type=ServiceRegistryEndpoint]
2019-02-25 16:50:01.862|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'refreshScope': registering with JMX server as MBean [org.springframework.cloud.context.scope.refresh:name=refreshScope,type=RefreshScope]
2019-02-25 16:50:01.875|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'configurationPropertiesRebinder': registering with JMX server as MBean [org.springframework.cloud.context.properties:name=configurationPropertiesRebinder,context=2b62442c,type=ConfigurationPropertiesRebinder]
2019-02-25 16:50:01.881|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'refreshEndpoint': registering with JMX server as MBean [org.springframework.cloud.endpoint:name=refreshEndpoint,type=RefreshEndpoint]
2019-02-25 16:50:01.886|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|671|Located MBean 'druidDataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=druidDataSource,type=DruidDataSource]
2019-02-25 16:50:01.914|INFO|org.springframework.jmx.export.MBeanExporter|main|afterSingletonsInstantiated|431|Registering beans for JMX exposure on startup
2019-02-25 16:50:01.930|INFO|org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup|main|start|343|Starting beans in phase 0
2019-02-25 16:50:01.937|INFO|org.springframework.cloud.netflix.eureka.InstanceInfoFactory|main|create|71|Setting initial instance status as: STARTING
2019-02-25 16:50:01.967|INFO|com.netflix.discovery.DiscoveryClient|main|<init>|347|Initializing Eureka in region us-east-1
2019-02-25 16:50:02.256|INFO|com.netflix.discovery.provider.DiscoveryJerseyProvider|main|<init>|70|Using JSON encoding codec LegacyJacksonJson
2019-02-25 16:50:02.256|INFO|com.netflix.discovery.provider.DiscoveryJerseyProvider|main|<init>|71|Using JSON decoding codec LegacyJacksonJson
2019-02-25 16:50:02.409|INFO|com.netflix.discovery.provider.DiscoveryJerseyProvider|main|<init>|80|Using XML encoding codec XStreamXml
2019-02-25 16:50:02.409|INFO|com.netflix.discovery.provider.DiscoveryJerseyProvider|main|<init>|81|Using XML decoding codec XStreamXml
2019-02-25 16:50:02.639|INFO|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver|main|getClusterEndpoints|43|Resolving eureka endpoints via configuration
2019-02-25 16:50:02.684|INFO|com.netflix.discovery.DiscoveryClient|main|fetchRegistry|934|Disable delta property : false
2019-02-25 16:50:02.684|INFO|com.netflix.discovery.DiscoveryClient|main|fetchRegistry|935|Single vip registry refresh property : null
2019-02-25 16:50:02.684|INFO|com.netflix.discovery.DiscoveryClient|main|fetchRegistry|936|Force full registry fetch : false
2019-02-25 16:50:02.685|INFO|com.netflix.discovery.DiscoveryClient|main|fetchRegistry|937|Application is null : false
2019-02-25 16:50:02.685|INFO|com.netflix.discovery.DiscoveryClient|main|fetchRegistry|938|Registered Applications size is zero : true
2019-02-25 16:50:02.685|INFO|com.netflix.discovery.DiscoveryClient|main|fetchRegistry|940|Application version is -1: true
2019-02-25 16:50:02.685|INFO|com.netflix.discovery.DiscoveryClient|main|getAndStoreFullRegistry|1023|Getting all instance registry info from the eureka server
2019-02-25 16:50:02.834|INFO|com.netflix.discovery.DiscoveryClient|main|getAndStoreFullRegistry|1032|The response status is 200
2019-02-25 16:50:02.835|INFO|com.netflix.discovery.DiscoveryClient|main|initScheduledTasks|1258|Starting heartbeat executor: renew interval is: 30
2019-02-25 16:50:02.837|INFO|com.netflix.discovery.InstanceInfoReplicator|main|<init>|59|InstanceInfoReplicator onDemand update allowed rate per min is 4
2019-02-25 16:50:02.839|INFO|com.netflix.discovery.DiscoveryClient|main|<init>|434|Discovery Client initialized at timestamp 1551084602839 with initial instances count: 14
2019-02-25 16:50:02.864|INFO|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry|main|register|40|Registering application jm-relationship-service with eureka with status UP
2019-02-25 16:50:02.865|INFO|com.netflix.discovery.DiscoveryClient$3|main|notify|1293|Saw local status change event StatusChangeEvent [timestamp=1551084602865, current=UP, previous=STARTING]
2019-02-25 16:50:02.867|INFO|com.netflix.discovery.DiscoveryClient|DiscoveryClient-InstanceInfoReplicator-0|register|804|DiscoveryClient_JM-RELATIONSHIP-SERVICE/192.168.4.152:18089: registering service...
2019-02-25 16:50:02.878|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'auditEventsEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=auditEventsEndpoint]
2019-02-25 16:50:02.895|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'archaiusEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=archaiusEndpoint]
2019-02-25 16:50:02.909|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'featuresEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=featuresEndpoint]
2019-02-25 16:50:02.916|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'requestMappingEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=requestMappingEndpoint]
2019-02-25 16:50:02.922|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'environmentEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=environmentEndpoint]
2019-02-25 16:50:02.926|INFO|com.netflix.discovery.DiscoveryClient|DiscoveryClient-InstanceInfoReplicator-0|register|813|DiscoveryClient_JM-RELATIONSHIP-SERVICE/192.168.4.152:18089 - registration status: 204
2019-02-25 16:50:02.929|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'healthEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=healthEndpoint]
2019-02-25 16:50:02.933|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'beansEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=beansEndpoint]
2019-02-25 16:50:02.936|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'infoEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=infoEndpoint]
2019-02-25 16:50:02.942|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'loggersEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=loggersEndpoint]
2019-02-25 16:50:02.953|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'metricsEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=metricsEndpoint]
2019-02-25 16:50:02.961|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'traceEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=traceEndpoint]
2019-02-25 16:50:02.968|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'dumpEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=dumpEndpoint]
2019-02-25 16:50:02.972|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'autoConfigurationReportEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=autoConfigurationReportEndpoint]
2019-02-25 16:50:02.974|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'configurationPropertiesReportEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=configurationPropertiesReportEndpoint]
2019-02-25 16:50:02.976|INFO|org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup|main|start|343|Starting beans in phase 2147483647
2019-02-25 16:50:02.977|INFO|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper|main|start|151|Context refreshed
2019-02-25 16:50:02.986|INFO|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper|main|start|154|Found 1 custom documentation plugin(s)
2019-02-25 16:50:03.015|INFO|springfox.documentation.spring.web.scanners.ApiListingReferenceScanner|main|scan|41|Scanning for api listing references
2019-02-25 16:50:03.254|INFO|org.springframework.cloud.netflix.hystrix.HystrixCircuitBreakerConfiguration$HystrixMetricsPollerConfiguration|main|start|138|Starting poller
2019-02-25 16:50:03.277|INFO|org.apache.juli.logging.DirectJDKLog|main|log|180|Initializing ProtocolHandler ["http-nio-18089"]
2019-02-25 16:50:03.284|INFO|org.apache.juli.logging.DirectJDKLog|main|log|180|Starting ProtocolHandler ["http-nio-18089"]
2019-02-25 16:50:03.294|INFO|org.apache.juli.logging.DirectJDKLog|main|log|180|Using a shared selector for servlet write/read
2019-02-25 16:50:03.313|INFO|org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer|main|start|201|Tomcat started on port(s): 18089 (http)
2019-02-25 16:50:03.314|INFO|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration|main|onApplicationEvent|124|Updating port to 18089
2019-02-25 16:50:03.315|INFO|com.codingapi.tx.springcloud.listener.ServerListener|main|onApplicationEvent|24|onApplicationEvent -> onApplicationEvent. org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer@6bfc5296
2019-02-25 16:50:03.319|INFO|com.codingapi.tx.netty.service.TxManagerHttpRequestHelper|main|reloadHttpRequestService|47|load HttpRequestService .
2019-02-25 16:50:03.319|INFO|com.sunfield.microframe.common.config.TxManagerHttpRequestServiceImpl|main|httpGet|18|httpGet start
2019-02-25 16:50:03.592|INFO|com.sunfield.microframe.common.config.TxManagerHttpRequestServiceImpl|main|httpGet|20|httpGet end,res is {"ip":"172.16.175.24","port":9999,"heart":15,"delay":5,"compensateMaxWaitTime":5000}

2019-02-25 16:50:03.592|INFO|com.codingapi.tx.netty.service.impl.NettyDistributeServiceImpl|main|getTxServer|43|get txManager ->{"ip":"172.16.175.24","port":9999,"heart":15,"delay":5,"compensateMaxWaitTime":5000}

2019-02-25 16:50:03.594|INFO|com.codingapi.tx.netty.service.impl.NettyDistributeServiceImpl|main|getTxServer|57|host:172.16.175.24,port:9999,heart:15,delay:5,compensateMaxWaitTime:5000
2019-02-25 16:50:03.594|INFO|com.codingapi.tx.netty.service.impl.NettyDistributeServiceImpl|main|getTxServer|59|host:172.16.175.24,port:9999,heart:15,delay:5,compensateMaxWaitTime:5000
2019-02-25 16:50:03.966|INFO|com.codingapi.tx.netty.service.impl.NettyServiceImpl|main|start|85|connection txManager-socket-> host:172.16.175.24,port:9999
2019-02-25 16:50:03.995|INFO|com.codingapi.tx.listener.service.impl.InitServiceImpl|main|start|25|socket-start..
2019-02-25 16:50:04.001|INFO|org.springframework.boot.StartupInfoLogger|main|logStarted|57|Started ServiceApplication in 11.462 seconds (JVM running for 13.098)
2019-02-25 16:50:04.009|INFO|com.codingapi.tx.netty.handler.TransactionHandler|nioEventLoopGroup-2-1|channelActive|87|connection -->io.netty.channel.DefaultChannelHandlerContext@182acabe
2019-02-25 16:50:04.714|INFO|com.alibaba.druid.pool.DruidDataSource|RMI TCP Connection(4)-127.0.0.1|init|947|{dataSource-1} inited
2019-02-25 16:50:09.034|INFO|com.codingapi.tx.framework.utils.SocketManager|pool-11-thread-1|sleepSend|84|send-msg->{"a":"umi","k":"XAzxD7MY","p":{"u":"286bae9563235576a14a2ae8fdd7215a","i":"192.168.4.152:18089","m":"jm-relationship-service"}}
2019-02-25 16:50:24.090|INFO|org.apache.juli.logging.DirectJDKLog|http-nio-18089-exec-1|log|180|Initializing Spring FrameworkServlet 'dispatcherServlet'
2019-02-25 16:50:24.091|INFO|org.springframework.web.servlet.FrameworkServlet|http-nio-18089-exec-1|initServletBean|489|FrameworkServlet 'dispatcherServlet': initialization started
2019-02-25 16:50:24.146|INFO|org.springframework.web.servlet.FrameworkServlet|http-nio-18089-exec-1|initServletBean|508|FrameworkServlet 'dispatcherServlet': initialization completed in 55 ms
2019-02-25 16:50:24.207|INFO|com.sunfield.microframe.common.aop.RestAop|http-nio-18089-exec-1|beforeRest|36|==> START REST: com.sunfield.microframe.rest.RelationshipController#findFriendRecord PARAMS:[{"createBy":null,"createDate":null,"id":null,"pageNumber":0,"pageSize":0,"remarks":null,"status":null,"type":4,"updateBy":null,"updateDate":null,"user":null,"userId":"0e06faa2ca6f4baa8ea262de154759ce","userIdOpposite":"73d8e67676d64dc786dfad06869570ec"}]
2019-02-25 16:50:24.240|DEBUG|org.apache.ibatis.logging.jdbc.BaseJdbcLogger|http-nio-18089-exec-1|debug|145|==>  Preparing: SELECT id AS id, user_id AS userId, user_id_opposite AS userIdOpposite, type AS type, status AS status, create_by AS createBy, create_date AS createDate, update_by AS updateBy, update_date AS updateDate, remarks AS remarks FROM jm_relationship_friendship WHERE (user_id = ?) AND (user_id_opposite = ?) AND (status = '0') 
2019-02-25 16:50:24.281|DEBUG|org.apache.ibatis.logging.jdbc.BaseJdbcLogger|http-nio-18089-exec-1|debug|145|==> Parameters: 0e06faa2ca6f4baa8ea262de154759ce(String), 73d8e67676d64dc786dfad06869570ec(String)
2019-02-25 16:50:24.295|DEBUG|org.apache.ibatis.logging.jdbc.BaseJdbcLogger|http-nio-18089-exec-1|debug|145|<==      Total: 1
2019-02-25 16:50:24.300|INFO|com.sunfield.microframe.common.aop.RestAop|http-nio-18089-exec-1|beforeRest|42|<== END REST: com.sunfield.microframe.rest.RelationshipController#findFriendRecord RETURN:{"data":{"createBy":null,"createDate":"2019-02-25 16:37:32","id":"62d2963f4e9c45d4bef178a78d85ea23","pageNumber":0,"pageSize":0,"remarks":null,"status":"0","type":2,"updateBy":null,"updateDate":"2019-02-25 16:37:32","user":null,"userId":"0e06faa2ca6f4baa8ea262de154759ce","userIdOpposite":"73d8e67676d64dc786dfad06869570ec"},"msg":"请求成功","status":"SUCCESS"} COST TIME:89ms
2019-02-25 16:51:38.894|INFO|com.sunfield.microframe.common.aop.RestAop|http-nio-18089-exec-3|beforeRest|36|==> START REST: com.sunfield.microframe.rest.RelationshipController#rejectFriendRequest PARAMS:[{"createBy":null,"createDate":null,"id":null,"pageNumber":0,"pageSize":0,"remarks":null,"status":null,"type":4,"updateBy":null,"updateDate":null,"user":null,"userId":"73d8e67676d64dc786dfad06869570ec","userIdOpposite":"0e06faa2ca6f4baa8ea262de154759ce"}]
2019-02-25 16:51:38.904|DEBUG|org.apache.ibatis.logging.jdbc.BaseJdbcLogger|http-nio-18089-exec-3|debug|145|==>  Preparing: UPDATE jm_relationship_friendship SET type = ?, update_by = ?, update_date = ?, remarks = ? WHERE (user_id = ?) AND (user_id_opposite = ?) AND (status = '0') 
2019-02-25 16:51:38.961|DEBUG|org.apache.ibatis.logging.jdbc.BaseJdbcLogger|http-nio-18089-exec-3|debug|145|==> Parameters: 3(Integer), null, 2019-02-25 16:51:38.898(Timestamp), null, 0e06faa2ca6f4baa8ea262de154759ce(String), 73d8e67676d64dc786dfad06869570ec(String)
2019-02-25 16:51:38.967|DEBUG|org.apache.ibatis.logging.jdbc.BaseJdbcLogger|http-nio-18089-exec-3|debug|145|<==    Updates: 1
2019-02-25 16:51:39.003|INFO|com.sunfield.microframe.common.aop.RestAop|http-nio-18089-exec-3|beforeRest|42|<== END REST: com.sunfield.microframe.rest.RelationshipController#rejectFriendRequest RETURN:{"data":{"createBy":null,"createDate":null,"id":null,"pageNumber":0,"pageSize":0,"remarks":null,"status":null,"type":3,"updateBy":null,"updateDate":null,"user":null,"userId":"73d8e67676d64dc786dfad06869570ec","userIdOpposite":"0e06faa2ca6f4baa8ea262de154759ce"},"msg":"请求成功","status":"SUCCESS"} COST TIME:108ms
2019-02-25 16:52:09.651|INFO|com.sunfield.microframe.common.aop.RestAop|http-nio-18089-exec-5|beforeRest|36|==> START REST: com.sunfield.microframe.rest.RelationshipController#findFriendRecord PARAMS:[{"createBy":null,"createDate":null,"id":null,"pageNumber":0,"pageSize":0,"remarks":null,"status":null,"type":4,"updateBy":null,"updateDate":null,"user":null,"userId":"0e06faa2ca6f4baa8ea262de154759ce","userIdOpposite":"73d8e67676d64dc786dfad06869570ec"}]
2019-02-25 16:52:09.652|DEBUG|org.apache.ibatis.logging.jdbc.BaseJdbcLogger|http-nio-18089-exec-5|debug|145|==>  Preparing: SELECT id AS id, user_id AS userId, user_id_opposite AS userIdOpposite, type AS type, status AS status, create_by AS createBy, create_date AS createDate, update_by AS updateBy, update_date AS updateDate, remarks AS remarks FROM jm_relationship_friendship WHERE (user_id = ?) AND (user_id_opposite = ?) AND (status = '0') 
2019-02-25 16:52:09.654|DEBUG|org.apache.ibatis.logging.jdbc.BaseJdbcLogger|http-nio-18089-exec-5|debug|145|==> Parameters: 0e06faa2ca6f4baa8ea262de154759ce(String), 73d8e67676d64dc786dfad06869570ec(String)
2019-02-25 16:52:09.659|DEBUG|org.apache.ibatis.logging.jdbc.BaseJdbcLogger|http-nio-18089-exec-5|debug|145|<==      Total: 1
2019-02-25 16:52:09.660|INFO|com.sunfield.microframe.common.aop.RestAop|http-nio-18089-exec-5|beforeRest|42|<== END REST: com.sunfield.microframe.rest.RelationshipController#findFriendRecord RETURN:{"data":{"createBy":null,"createDate":"2019-02-25 16:37:32","id":"62d2963f4e9c45d4bef178a78d85ea23","pageNumber":0,"pageSize":0,"remarks":null,"status":"0","type":3,"updateBy":null,"updateDate":"2019-02-25 16:51:39","user":null,"userId":"0e06faa2ca6f4baa8ea262de154759ce","userIdOpposite":"73d8e67676d64dc786dfad06869570ec"},"msg":"请求成功","status":"SUCCESS"} COST TIME:8ms
2019-02-25 16:52:41.536|INFO|com.sunfield.microframe.common.aop.RestAop|http-nio-18089-exec-7|beforeRest|36|==> START REST: com.sunfield.microframe.rest.RelationshipController#agreeAsAFriend PARAMS:[{"createBy":null,"createDate":null,"id":null,"pageNumber":0,"pageSize":0,"remarks":null,"status":null,"type":4,"updateBy":null,"updateDate":null,"user":null,"userId":"73d8e67676d64dc786dfad06869570ec","userIdOpposite":"0e06faa2ca6f4baa8ea262de154759ce"}]
2019-02-25 16:52:41.578|DEBUG|org.apache.ibatis.logging.jdbc.BaseJdbcLogger|http-nio-18089-exec-7|debug|145|==>  Preparing: UPDATE jm_relationship_friendship SET type = ?, update_by = ?, update_date = ?, remarks = ? WHERE (user_id = ?) AND (user_id_opposite = ?) AND (status = '0') 
2019-02-25 16:52:41.579|DEBUG|org.apache.ibatis.logging.jdbc.BaseJdbcLogger|http-nio-18089-exec-7|debug|145|==> Parameters: 0(Integer), null, 2019-02-25 16:52:41.576(Timestamp), null, 0e06faa2ca6f4baa8ea262de154759ce(String), 73d8e67676d64dc786dfad06869570ec(String)
2019-02-25 16:52:41.585|DEBUG|org.apache.ibatis.logging.jdbc.BaseJdbcLogger|http-nio-18089-exec-7|debug|145|<==    Updates: 1
2019-02-25 16:52:41.587|DEBUG|org.apache.ibatis.logging.jdbc.BaseJdbcLogger|http-nio-18089-exec-7|debug|145|==>  Preparing: INSERT INTO jm_relationship_friendship (id, type, user_id, user_id_opposite, status, create_by, create_date, update_by, update_date, remarks) VALUES (?, ?, ?, ?, 0, ?, ?, ?, ?, ?) 
2019-02-25 16:52:41.598|DEBUG|org.apache.ibatis.logging.jdbc.BaseJdbcLogger|http-nio-18089-exec-7|debug|145|==> Parameters: 8ad96432a24b48c3a46772528155b87b(String), 0(Integer), 73d8e67676d64dc786dfad06869570ec(String), 0e06faa2ca6f4baa8ea262de154759ce(String), null, 2019-02-25 16:52:41.572(Timestamp), null, 2019-02-25 16:52:41.572(Timestamp), null
2019-02-25 16:52:41.602|DEBUG|org.apache.ibatis.logging.jdbc.BaseJdbcLogger|http-nio-18089-exec-7|debug|145|<==    Updates: 1
2019-02-25 16:52:41.751|INFO|com.codingapi.tx.springcloud.feign.TransactionRestTemplateInterceptor|hystrix-jm-user-service-1|apply|23|LCN-SpringCloud TxGroup info -> groupId:null
2019-02-25 16:52:41.754|INFO|org.springframework.context.support.AbstractApplicationContext|hystrix-jm-user-service-1|prepareRefresh|583|Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@3c5ce773: startup date [Mon Feb 25 16:52:41 CST 2019]; parent: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@2b62442c
2019-02-25 16:52:41.828|INFO|org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor|hystrix-jm-user-service-1|<init>|155|JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2019-02-25 16:52:42.019|INFO|com.netflix.config.ChainedDynamicProperty$ChainLink|hystrix-jm-user-service-1|checkAndFlip|115|Flipping property: jm-user-service.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647
2019-02-25 16:52:42.049|INFO|com.netflix.util.concurrent.ShutdownEnabledTimer|hystrix-jm-user-service-1|<init>|58|Shutdown hook installed for: NFLoadBalancer-PingTimer-jm-user-service
2019-02-25 16:52:42.053|INFO|com.netflix.loadbalancer.BaseLoadBalancer|hystrix-jm-user-service-1|initWithConfig|192|Client: jm-user-service instantiated a LoadBalancer: DynamicServerListLoadBalancer:{NFLoadBalancer:name=jm-user-service,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null
2019-02-25 16:52:42.058|INFO|com.netflix.loadbalancer.DynamicServerListLoadBalancer|hystrix-jm-user-service-1|enableAndInitLearnNewServersFeature|222|Using serverListUpdater PollingServerListUpdater
2019-02-25 16:52:42.062|INFO|com.netflix.loadbalancer.DynamicServerListLoadBalancer|hystrix-jm-user-service-1|restOfInit|150|DynamicServerListLoadBalancer for client jm-user-service initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=jm-user-service,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@505b56f4
2019-02-25 16:52:42.206|INFO|com.codingapi.ribbon.loadbalancer.LcnZoneAwareLoadBalancerProxy|hystrix-jm-user-service-1|chooseServer|28|enter chooseServer method, key:null
2019-02-25 16:52:42.209|INFO|com.codingapi.ribbon.loadbalancer.LcnZoneAwareLoadBalancerProxy|hystrix-jm-user-service-1|chooseServer|28|enter chooseServer method, key:null
2019-02-25 16:52:42.210|INFO|com.codingapi.ribbon.loadbalancer.LcnZoneAwareLoadBalancerProxy|hystrix-jm-user-service-1|chooseServer|28|enter chooseServer method, key:null
2019-02-25 16:52:42.224|INFO|com.codingapi.tx.springcloud.feign.TransactionRestTemplateInterceptor|hystrix-jm-user-service-2|apply|23|LCN-SpringCloud TxGroup info -> groupId:null
2019-02-25 16:52:42.225|INFO|com.codingapi.ribbon.loadbalancer.LcnZoneAwareLoadBalancerProxy|hystrix-jm-user-service-2|chooseServer|28|enter chooseServer method, key:null
2019-02-25 16:52:42.225|INFO|com.codingapi.ribbon.loadbalancer.LcnZoneAwareLoadBalancerProxy|hystrix-jm-user-service-2|chooseServer|28|enter chooseServer method, key:null
2019-02-25 16:52:42.226|INFO|com.codingapi.ribbon.loadbalancer.LcnZoneAwareLoadBalancerProxy|hystrix-jm-user-service-2|chooseServer|28|enter chooseServer method, key:null
2019-02-25 16:52:42.378|INFO|com.sunfield.microframe.common.aop.RestAop|http-nio-18089-exec-7|beforeRest|42|<== END REST: com.sunfield.microframe.rest.RelationshipController#agreeAsAFriend RETURN:{"data":null,"msg":"请求失败","status":"FAIL"} COST TIME:841ms
2019-02-25 16:55:02.693|INFO|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver|AsyncResolver-bootstrap-executor-0|getClusterEndpoints|43|Resolving eureka endpoints via configuration
2019-02-25 17:00:02.701|INFO|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver|AsyncResolver-bootstrap-executor-0|getClusterEndpoints|43|Resolving eureka endpoints via configuration
2019-02-25 17:07:12.098|INFO|org.springframework.context.support.AbstractApplicationContext|main|prepareRefresh|583|Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@456d6c1e: startup date [Mon Feb 25 17:07:12 CST 2019]; root of context hierarchy
2019-02-25 17:07:12.274|INFO|org.hibernate.validator.internal.util.Version|background-preinit|<clinit>|30|HV000001: Hibernate Validator 5.3.6.Final
2019-02-25 17:07:12.372|INFO|org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor|main|<init>|155|JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2019-02-25 17:07:12.419|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'configurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$38297a6a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 17:07:12.759|INFO|org.springframework.boot.SpringApplication|main|logStartupProfileInfo|593|No active profile set, falling back to default profiles: default
2019-02-25 17:07:12.776|INFO|org.springframework.context.support.AbstractApplicationContext|main|prepareRefresh|583|Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@2b62442c: startup date [Mon Feb 25 17:07:12 CST 2019]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@456d6c1e
2019-02-25 17:07:13.987|INFO|org.springframework.data.repository.config.RepositoryConfigurationDelegate|main|multipleStoresDetected|165|Multiple Spring Data modules found, entering strict repository configuration mode!
2019-02-25 17:11:35.481|INFO|org.springframework.context.support.AbstractApplicationContext|main|prepareRefresh|583|Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@456d6c1e: startup date [Mon Feb 25 17:11:35 CST 2019]; root of context hierarchy
2019-02-25 17:11:35.646|INFO|org.hibernate.validator.internal.util.Version|background-preinit|<clinit>|30|HV000001: Hibernate Validator 5.3.6.Final
2019-02-25 17:11:35.773|INFO|org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor|main|<init>|155|JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2019-02-25 17:11:35.818|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'configurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$38297a6a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 17:11:36.190|INFO|org.springframework.boot.SpringApplication|main|logStartupProfileInfo|593|No active profile set, falling back to default profiles: default
2019-02-25 17:11:36.209|INFO|org.springframework.context.support.AbstractApplicationContext|main|prepareRefresh|583|Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@2b62442c: startup date [Mon Feb 25 17:11:36 CST 2019]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@456d6c1e
2019-02-25 17:11:37.412|INFO|org.springframework.data.repository.config.RepositoryConfigurationDelegate|main|multipleStoresDetected|165|Multiple Spring Data modules found, entering strict repository configuration mode!
2019-02-25 17:11:37.593|INFO|com.ctrip.framework.foundation.internals.provider.DefaultApplicationProvider|main|initAppId|93|App ID is set to jm-relationship-service-v1 by app.id property from /META-INF/app.properties
2019-02-25 17:11:37.594|INFO|com.ctrip.framework.foundation.internals.provider.DefaultServerProvider|main|initEnvType|108|Environment is set to [dev] by JVM system property 'env'.
2019-02-25 17:11:37.742|INFO|org.springframework.cloud.context.scope.GenericScope|main|setSerializationId|288|BeanFactory id=aef2ef56-a824-3d0b-9d96-a0ca4374343d
2019-02-25 17:11:37.791|INFO|com.ctrip.framework.apollo.internals.DefaultMetaServerProvider|main|initMetaServerAddress|42|Located meta services from apollo.meta configuration: http://172.16.175.22:8080!
2019-02-25 17:11:37.793|INFO|com.ctrip.framework.apollo.core.MetaDomainConsts|main|initMetaServerAddress|93|Located meta server address http://172.16.175.22:8080 for env DEV from com.ctrip.framework.apollo.internals.DefaultMetaServerProvider
2019-02-25 17:11:37.912|INFO|org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor|main|<init>|155|JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2019-02-25 17:11:37.977|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'com.sunfield.microframe.feign.JmAppUserFeignService' of type [org.springframework.cloud.netflix.feign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 17:11:37.978|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'com.sunfield.microframe.feign.JmIndustriesFeignService' of type [org.springframework.cloud.netflix.feign.FeignClientFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 17:11:38.105|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$1c0f776d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 17:11:38.274|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'redisConfig' of type [com.sunfield.microframe.common.config.RedisConfig$$EnhancerBySpringCGLIB$$e8d05354] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 17:11:38.284|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'org.springframework.cache.annotation.ProxyCachingConfiguration' of type [org.springframework.cache.annotation.ProxyCachingConfiguration$$EnhancerBySpringCGLIB$$6521ad8b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 17:11:38.348|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'org.springframework.cloud.netflix.metrics.MetricsInterceptorConfiguration$MetricsRestTemplateConfiguration' of type [org.springframework.cloud.netflix.metrics.MetricsInterceptorConfiguration$MetricsRestTemplateConfiguration$$EnhancerBySpringCGLIB$$4e3c1dae] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 17:11:38.370|INFO|org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker|main|postProcessAfterInitialization|327|Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$38297a6a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2019-02-25 17:11:38.809|INFO|org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer|main|initialize|89|Tomcat initialized with port(s): 18089 (http)
2019-02-25 17:11:38.818|INFO|org.apache.juli.logging.DirectJDKLog|main|log|180|Starting service [Tomcat]
2019-02-25 17:11:38.819|INFO|org.apache.juli.logging.DirectJDKLog|main|log|180|Starting Servlet Engine: Apache Tomcat/8.5.27
2019-02-25 17:11:39.080|INFO|org.apache.juli.logging.DirectJDKLog|localhost-startStop-1|log|180|Initializing Spring embedded WebApplicationContext
2019-02-25 17:11:39.081|INFO|org.springframework.boot.context.embedded.EmbeddedWebApplicationContext|localhost-startStop-1|prepareEmbeddedWebApplicationContext|276|Root WebApplicationContext: initialization completed in 2872 ms
2019-02-25 17:11:39.565|INFO|org.springframework.boot.web.servlet.ServletRegistrationBean|localhost-startStop-1|onStartup|190|Mapping servlet: 'statViewServlet' to [/druid/*]
2019-02-25 17:11:39.567|INFO|org.springframework.boot.web.servlet.ServletRegistrationBean|localhost-startStop-1|onStartup|190|Mapping servlet: 'dispatcherServlet' to [/]
2019-02-25 17:11:39.570|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|258|Mapping filter: 'metricsFilter' to: [/*]
2019-02-25 17:11:39.571|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|258|Mapping filter: 'characterEncodingFilter' to: [/*]
2019-02-25 17:11:39.571|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|258|Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2019-02-25 17:11:39.571|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|258|Mapping filter: 'httpPutFormContentFilter' to: [/*]
2019-02-25 17:11:39.571|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|258|Mapping filter: 'requestContextFilter' to: [/*]
2019-02-25 17:11:39.572|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|258|Mapping filter: 'webRequestLoggingFilter' to: [/*]
2019-02-25 17:11:39.572|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|271|Mapping filter: 'webStatFilter' to urls: [/*]
2019-02-25 17:11:39.572|INFO|org.springframework.boot.web.servlet.AbstractFilterRegistrationBean|localhost-startStop-1|configure|258|Mapping filter: 'applicationContextIdFilter' to: [/*]
2019-02-25 17:11:39.995|INFO|org.springframework.aop.framework.CglibAopProxy|main|doValidateClass|268|Final method [private final void com.alibaba.druid.pool.DruidDataSource.decrementPoolingCount()] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.
2019-02-25 17:11:39.996|INFO|org.springframework.aop.framework.CglibAopProxy|main|doValidateClass|268|Final method [private final void com.alibaba.druid.pool.DruidDataSource.incrementPoolingCount()] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.
2019-02-25 17:11:39.996|INFO|org.springframework.aop.framework.CglibAopProxy|main|doValidateClass|268|Final method [protected final void com.alibaba.druid.pool.DruidDataSource.handleFatalError(com.alibaba.druid.pool.DruidPooledConnection,java.sql.SQLException,java.lang.String) throws java.sql.SQLException] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.
2019-02-25 17:11:40.247|INFO|org.springframework.context.support.AbstractApplicationContext|main|prepareRefresh|583|Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@69ffdaa8: startup date [Mon Feb 25 17:11:40 CST 2019]; parent: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@2b62442c
2019-02-25 17:11:40.264|INFO|org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor|main|<init>|155|JSR-330 'javax.inject.Inject' annotation found and supported for autowiring
2019-02-25 17:11:41.224|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/rejectFriendRequest],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<com.sunfield.microframe.domain.JmRelationshipFriendship> com.sunfield.microframe.rest.RelationshipController.rejectFriendRequest(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 17:11:41.225|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/findFriendRequestsOppsite],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<java.util.List<com.sunfield.microframe.domain.JmRelationshipFriendship>> com.sunfield.microframe.rest.RelationshipController.findFriendRequestsOppsite(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 17:11:41.225|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/findFriendRequestsOppsitePage],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<com.sunfield.microframe.common.response.Page<com.sunfield.microframe.domain.JmRelationshipFriendship>> com.sunfield.microframe.rest.RelationshipController.findFriendRequestsOppsitePage(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 17:11:41.226|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/removeFriend],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<com.sunfield.microframe.domain.JmRelationshipFriendship> com.sunfield.microframe.rest.RelationshipController.removeFriend(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 17:11:41.226|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/addFriendRequest],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<com.sunfield.microframe.domain.JmRelationshipFriendship> com.sunfield.microframe.rest.RelationshipController.addFriendRequest(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 17:11:41.227|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/agreeAsAFriend],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<com.sunfield.microframe.domain.JmRelationshipFriendship> com.sunfield.microframe.rest.RelationshipController.agreeAsAFriend(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 17:11:41.227|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/findFriendRecord],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<com.sunfield.microframe.domain.JmRelationshipFriendship> com.sunfield.microframe.rest.RelationshipController.findFriendRecord(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 17:11:41.228|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/findFriends],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<java.util.List<com.sunfield.microframe.domain.JmRelationshipFriendship>> com.sunfield.microframe.rest.RelationshipController.findFriends(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 17:11:41.228|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/JmRelationship/findFriendsPage],methods=[POST]}" onto public com.sunfield.microframe.common.response.RelationshipResponseBean<com.sunfield.microframe.common.response.Page<com.sunfield.microframe.domain.JmRelationshipFriendship>> com.sunfield.microframe.rest.RelationshipController.findFriendsPage(com.sunfield.microframe.domain.JmRelationshipFriendship)
2019-02-25 17:11:41.231|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/swagger-resources]}" onto public org.springframework.http.ResponseEntity<java.util.List<springfox.documentation.swagger.web.SwaggerResource>> springfox.documentation.swagger.web.ApiResourceController.swaggerResources()
2019-02-25 17:11:41.232|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/swagger-resources/configuration/ui]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.UiConfiguration> springfox.documentation.swagger.web.ApiResourceController.uiConfiguration()
2019-02-25 17:11:41.233|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/swagger-resources/configuration/security]}" onto public org.springframework.http.ResponseEntity<springfox.documentation.swagger.web.SecurityConfiguration> springfox.documentation.swagger.web.ApiResourceController.securityConfiguration()
2019-02-25 17:11:41.235|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/error]}" onto public org.springframework.http.ResponseEntity<java.util.Map<java.lang.String, java.lang.Object>> org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)
2019-02-25 17:11:41.236|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/error],produces=[text/html]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
2019-02-25 17:11:41.279|WARN|com.netflix.config.sources.URLConfigurationSource|main|<init>|121|No URLs will be polled as dynamic configuration sources.
2019-02-25 17:11:41.279|INFO|com.netflix.config.sources.URLConfigurationSource|main|<init>|122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2019-02-25 17:11:41.283|INFO|com.netflix.config.DynamicPropertyFactory|main|getInstance|281|DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@34b2d51a
2019-02-25 17:11:42.237|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/auditevents || /auditevents.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public org.springframework.http.ResponseEntity<?> org.springframework.boot.actuate.endpoint.mvc.AuditEventsMvcEndpoint.findByPrincipalAndAfterAndType(java.lang.String,java.util.Date,java.lang.String)
2019-02-25 17:11:42.239|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/metrics/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint.value(java.lang.String)
2019-02-25 17:11:42.239|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/metrics || /metrics.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 17:11:42.240|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/configprops || /configprops.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 17:11:42.241|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/features || /features.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 17:11:42.241|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/dump || /dump.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 17:11:42.243|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/refresh || /refresh.json],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.endpoint.GenericPostableMvcEndpoint.invoke()
2019-02-25 17:11:42.243|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/heapdump || /heapdump.json],methods=[GET],produces=[application/octet-stream]}" onto public void org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint.invoke(boolean,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.io.IOException,javax.servlet.ServletException
2019-02-25 17:11:42.244|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/mappings || /mappings.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 17:11:42.245|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/env],methods=[POST]}" onto public java.lang.Object org.springframework.cloud.context.environment.EnvironmentManagerMvcEndpoint.value(java.util.Map<java.lang.String, java.lang.String>)
2019-02-25 17:11:42.245|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/env/reset],methods=[POST]}" onto public java.util.Map<java.lang.String, java.lang.Object> org.springframework.cloud.context.environment.EnvironmentManagerMvcEndpoint.reset()
2019-02-25 17:11:42.246|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/env/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EnvironmentMvcEndpoint.value(java.lang.String)
2019-02-25 17:11:42.246|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/env || /env.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 17:11:42.247|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/info || /info.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 17:11:42.247|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/hystrix.stream/**]}" onto public org.springframework.web.servlet.ModelAndView org.springframework.cloud.netflix.endpoint.ServletWrappingEndpoint.handle(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception
2019-02-25 17:11:42.248|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/health || /health.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint.invoke(javax.servlet.http.HttpServletRequest,java.security.Principal)
2019-02-25 17:11:42.248|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/service-registry/instance-status],methods=[GET]}" onto public org.springframework.http.ResponseEntity org.springframework.cloud.client.serviceregistry.endpoint.ServiceRegistryEndpoint.getStatus()
2019-02-25 17:11:42.249|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/service-registry/instance-status],methods=[POST]}" onto public org.springframework.http.ResponseEntity<?> org.springframework.cloud.client.serviceregistry.endpoint.ServiceRegistryEndpoint.setStatus(java.lang.String)
2019-02-25 17:11:42.249|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/beans || /beans.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 17:11:42.250|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/loggers/{name:.*}],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.LoggersMvcEndpoint.get(java.lang.String)
2019-02-25 17:11:42.251|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/loggers/{name:.*}],methods=[POST],consumes=[application/vnd.spring-boot.actuator.v1+json || application/json],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.LoggersMvcEndpoint.set(java.lang.String,java.util.Map<java.lang.String, java.lang.String>)
2019-02-25 17:11:42.251|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/loggers || /loggers.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 17:11:42.252|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/archaius || /archaius.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 17:11:42.252|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/trace || /trace.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 17:11:42.253|INFO|org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry|main|register|543|Mapped "{[/autoconfig || /autoconfig.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]}" onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()
2019-02-25 17:11:42.450|INFO|springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping|main|initHandlerMethods|69|Mapped URL path [/v2/api-docs] onto method [public org.springframework.http.ResponseEntity<springfox.documentation.spring.web.json.Json> springfox.documentation.swagger2.web.Swagger2Controller.getDocumentation(java.lang.String,javax.servlet.http.HttpServletRequest)]
2019-02-25 17:11:42.715|WARN|com.netflix.config.sources.URLConfigurationSource|main|<init>|121|No URLs will be polled as dynamic configuration sources.
2019-02-25 17:11:42.715|INFO|com.netflix.config.sources.URLConfigurationSource|main|<init>|122|To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
2019-02-25 17:11:42.910|INFO|org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter|main|initControllerAdviceCache|534|Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@2b62442c: startup date [Mon Feb 25 17:11:36 CST 2019]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@456d6c1e
2019-02-25 17:11:42.996|INFO|org.springframework.web.servlet.handler.AbstractUrlHandlerMapping|main|registerHandler|362|Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 17:11:42.996|INFO|org.springframework.web.servlet.handler.AbstractUrlHandlerMapping|main|registerHandler|362|Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 17:11:43.058|INFO|org.springframework.web.servlet.handler.AbstractUrlHandlerMapping|main|registerHandler|362|Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]
2019-02-25 17:11:43.596|INFO|org.springframework.ui.freemarker.SpringTemplateLoader|main|<init>|61|SpringTemplateLoader for FreeMarker: using resource loader [org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@2b62442c: startup date [Mon Feb 25 17:11:36 CST 2019]; parent: org.springframework.context.annotation.AnnotationConfigApplicationContext@456d6c1e] and template loader path [classpath:/templates/]
2019-02-25 17:11:43.597|INFO|org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer|main|postProcessTemplateLoaders|127|ClassTemplateLoader for Spring macros added to FreeMarker configuration
2019-02-25 17:11:44.066|INFO|org.springframework.jmx.export.MBeanExporter|main|afterSingletonsInstantiated|431|Registering beans for JMX exposure on startup
2019-02-25 17:11:44.068|INFO|org.springframework.jmx.export.MBeanExporter|main|autodetect|916|Bean with name 'druidDataSource' has been autodetected for JMX exposure
2019-02-25 17:11:44.079|INFO|org.springframework.jmx.export.MBeanExporter|main|autodetect|916|Bean with name 'configurationPropertiesRebinder' has been autodetected for JMX exposure
2019-02-25 17:11:44.080|INFO|org.springframework.jmx.export.MBeanExporter|main|autodetect|916|Bean with name 'refreshEndpoint' has been autodetected for JMX exposure
2019-02-25 17:11:44.081|INFO|org.springframework.jmx.export.MBeanExporter|main|autodetect|916|Bean with name 'environmentManager' has been autodetected for JMX exposure
2019-02-25 17:11:44.081|INFO|org.springframework.jmx.export.MBeanExporter|main|autodetect|916|Bean with name 'serviceRegistryEndpoint' has been autodetected for JMX exposure
2019-02-25 17:11:44.082|INFO|org.springframework.jmx.export.MBeanExporter|main|autodetect|916|Bean with name 'refreshScope' has been autodetected for JMX exposure
2019-02-25 17:11:44.085|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'environmentManager': registering with JMX server as MBean [org.springframework.cloud.context.environment:name=environmentManager,type=EnvironmentManager]
2019-02-25 17:11:44.101|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'serviceRegistryEndpoint': registering with JMX server as MBean [org.springframework.cloud.client.serviceregistry.endpoint:name=serviceRegistryEndpoint,type=ServiceRegistryEndpoint]
2019-02-25 17:11:44.112|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'refreshScope': registering with JMX server as MBean [org.springframework.cloud.context.scope.refresh:name=refreshScope,type=RefreshScope]
2019-02-25 17:11:44.127|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'configurationPropertiesRebinder': registering with JMX server as MBean [org.springframework.cloud.context.properties:name=configurationPropertiesRebinder,context=2b62442c,type=ConfigurationPropertiesRebinder]
2019-02-25 17:11:44.134|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'refreshEndpoint': registering with JMX server as MBean [org.springframework.cloud.endpoint:name=refreshEndpoint,type=RefreshEndpoint]
2019-02-25 17:11:44.140|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|671|Located MBean 'druidDataSource': registering with JMX server as MBean [com.alibaba.druid.pool:name=druidDataSource,type=DruidDataSource]
2019-02-25 17:11:44.168|INFO|org.springframework.jmx.export.MBeanExporter|main|afterSingletonsInstantiated|431|Registering beans for JMX exposure on startup
2019-02-25 17:11:44.184|INFO|org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup|main|start|343|Starting beans in phase 0
2019-02-25 17:11:44.191|INFO|org.springframework.cloud.netflix.eureka.InstanceInfoFactory|main|create|71|Setting initial instance status as: STARTING
2019-02-25 17:11:44.223|INFO|com.netflix.discovery.DiscoveryClient|main|<init>|347|Initializing Eureka in region us-east-1
2019-02-25 17:11:44.500|INFO|com.netflix.discovery.provider.DiscoveryJerseyProvider|main|<init>|70|Using JSON encoding codec LegacyJacksonJson
2019-02-25 17:11:44.500|INFO|com.netflix.discovery.provider.DiscoveryJerseyProvider|main|<init>|71|Using JSON decoding codec LegacyJacksonJson
2019-02-25 17:11:44.605|INFO|com.netflix.discovery.provider.DiscoveryJerseyProvider|main|<init>|80|Using XML encoding codec XStreamXml
2019-02-25 17:11:44.605|INFO|com.netflix.discovery.provider.DiscoveryJerseyProvider|main|<init>|81|Using XML decoding codec XStreamXml
2019-02-25 17:11:44.821|INFO|com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver|main|getClusterEndpoints|43|Resolving eureka endpoints via configuration
2019-02-25 17:11:44.865|INFO|com.netflix.discovery.DiscoveryClient|main|fetchRegistry|934|Disable delta property : false
2019-02-25 17:11:44.865|INFO|com.netflix.discovery.DiscoveryClient|main|fetchRegistry|935|Single vip registry refresh property : null
2019-02-25 17:11:44.865|INFO|com.netflix.discovery.DiscoveryClient|main|fetchRegistry|936|Force full registry fetch : false
2019-02-25 17:11:44.865|INFO|com.netflix.discovery.DiscoveryClient|main|fetchRegistry|937|Application is null : false
2019-02-25 17:11:44.865|INFO|com.netflix.discovery.DiscoveryClient|main|fetchRegistry|938|Registered Applications size is zero : true
2019-02-25 17:11:44.865|INFO|com.netflix.discovery.DiscoveryClient|main|fetchRegistry|940|Application version is -1: true
2019-02-25 17:11:44.866|INFO|com.netflix.discovery.DiscoveryClient|main|getAndStoreFullRegistry|1023|Getting all instance registry info from the eureka server
2019-02-25 17:11:45.000|INFO|com.netflix.discovery.DiscoveryClient|main|getAndStoreFullRegistry|1032|The response status is 200
2019-02-25 17:11:45.002|INFO|com.netflix.discovery.DiscoveryClient|main|initScheduledTasks|1258|Starting heartbeat executor: renew interval is: 30
2019-02-25 17:11:45.003|INFO|com.netflix.discovery.InstanceInfoReplicator|main|<init>|59|InstanceInfoReplicator onDemand update allowed rate per min is 4
2019-02-25 17:11:45.006|INFO|com.netflix.discovery.DiscoveryClient|main|<init>|434|Discovery Client initialized at timestamp 1551085905005 with initial instances count: 12
2019-02-25 17:11:45.024|INFO|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry|main|register|40|Registering application jm-relationship-service with eureka with status UP
2019-02-25 17:11:45.026|INFO|com.netflix.discovery.DiscoveryClient$3|main|notify|1293|Saw local status change event StatusChangeEvent [timestamp=1551085905026, current=UP, previous=STARTING]
2019-02-25 17:11:45.027|INFO|com.netflix.discovery.DiscoveryClient|DiscoveryClient-InstanceInfoReplicator-0|register|804|DiscoveryClient_JM-RELATIONSHIP-SERVICE/192.168.4.152:18089: registering service...
2019-02-25 17:11:45.035|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'auditEventsEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=auditEventsEndpoint]
2019-02-25 17:11:45.046|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'archaiusEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=archaiusEndpoint]
2019-02-25 17:11:45.061|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'featuresEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=featuresEndpoint]
2019-02-25 17:11:45.067|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'requestMappingEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=requestMappingEndpoint]
2019-02-25 17:11:45.073|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'environmentEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=environmentEndpoint]
2019-02-25 17:11:45.077|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'healthEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=healthEndpoint]
2019-02-25 17:11:45.083|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'beansEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=beansEndpoint]
2019-02-25 17:11:45.087|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'infoEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=infoEndpoint]
2019-02-25 17:11:45.091|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'loggersEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=loggersEndpoint]
2019-02-25 17:11:45.097|INFO|com.netflix.discovery.DiscoveryClient|DiscoveryClient-InstanceInfoReplicator-0|register|813|DiscoveryClient_JM-RELATIONSHIP-SERVICE/192.168.4.152:18089 - registration status: 204
2019-02-25 17:11:45.106|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'metricsEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=metricsEndpoint]
2019-02-25 17:11:45.109|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'traceEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=traceEndpoint]
2019-02-25 17:11:45.114|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'dumpEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=dumpEndpoint]
2019-02-25 17:11:45.122|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'autoConfigurationReportEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=autoConfigurationReportEndpoint]
2019-02-25 17:11:45.126|INFO|org.springframework.jmx.export.MBeanExporter|main|registerBeanInstance|678|Located managed bean 'configurationPropertiesReportEndpoint': registering with JMX server as MBean [org.springframework.boot:type=Endpoint,name=configurationPropertiesReportEndpoint]
2019-02-25 17:11:45.128|INFO|org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup|main|start|343|Starting beans in phase 2147483647
2019-02-25 17:11:45.128|INFO|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper|main|start|151|Context refreshed
2019-02-25 17:11:45.141|INFO|springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper|main|start|154|Found 1 custom documentation plugin(s)
2019-02-25 17:11:45.172|INFO|springfox.documentation.spring.web.scanners.ApiListingReferenceScanner|main|scan|41|Scanning for api listing references
2019-02-25 17:11:45.391|INFO|org.springframework.cloud.netflix.hystrix.HystrixCircuitBreakerConfiguration$HystrixMetricsPollerConfiguration|main|start|138|Starting poller
2019-02-25 17:11:45.415|INFO|org.apache.juli.logging.DirectJDKLog|main|log|180|Initializing ProtocolHandler ["http-nio-18089"]
2019-02-25 17:11:45.422|INFO|org.apache.juli.logging.DirectJDKLog|main|log|180|Starting ProtocolHandler ["http-nio-18089"]
2019-02-25 17:11:45.432|INFO|org.apache.juli.logging.DirectJDKLog|main|log|180|Using a shared selector for servlet write/read
2019-02-25 17:11:45.450|INFO|org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer|main|start|201|Tomcat started on port(s): 18089 (http)
2019-02-25 17:11:45.451|INFO|org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration|main|onApplicationEvent|124|Updating port to 18089
2019-02-25 17:11:45.452|INFO|com.codingapi.tx.springcloud.listener.ServerListener|main|onApplicationEvent|24|onApplicationEvent -> onApplicationEvent. org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer@6bfc5296
2019-02-25 17:11:45.456|INFO|com.codingapi.tx.netty.service.TxManagerHttpRequestHelper|main|reloadHttpRequestService|47|load HttpRequestService .
2019-02-25 17:11:45.456|INFO|com.sunfield.microframe.common.config.TxManagerHttpRequestServiceImpl|main|httpGet|18|httpGet start
2019-02-25 17:11:46.586|INFO|com.sunfield.microframe.common.config.TxManagerHttpRequestServiceImpl|main|httpGet|20|httpGet end,res is {"ip":"172.16.175.24","port":9999,"heart":15,"delay":5,"compensateMaxWaitTime":5000}

2019-02-25 17:11:46.587|INFO|com.codingapi.tx.netty.service.impl.NettyDistributeServiceImpl|main|getTxServer|43|get txManager ->{"ip":"172.16.175.24","port":9999,"heart":15,"delay":5,"compensateMaxWaitTime":5000}

2019-02-25 17:11:46.590|INFO|com.codingapi.tx.netty.service.impl.NettyDistributeServiceImpl|main|getTxServer|57|host:172.16.175.24,port:9999,heart:15,delay:5,compensateMaxWaitTime:5000
2019-02-25 17:11:46.590|INFO|com.codingapi.tx.netty.service.impl.NettyDistributeServiceImpl|main|getTxServer|59|host:172.16.175.24,port:9999,heart:15,delay:5,compensateMaxWaitTime:5000
2019-02-25 17:11:46.980|INFO|com.codingapi.tx.netty.service.impl.NettyServiceImpl|main|start|85|connection txManager-socket-> host:172.16.175.24,port:9999
2019-02-25 17:11:47.009|INFO|com.codingapi.tx.listener.service.impl.InitServiceImpl|main|start|25|socket-start..
2019-02-25 17:11:47.015|INFO|org.springframework.boot.StartupInfoLogger|main|logStarted|57|Started ServiceApplication in 12.009 seconds (JVM running for 13.524)
2019-02-25 17:11:47.022|INFO|com.codingapi.tx.netty.handler.TransactionHandler|nioEventLoopGroup-2-1|channelActive|87|connection -->io.netty.channel.DefaultChannelHandlerContext@7e936dac
2019-02-25 17:11:47.729|INFO|com.alibaba.druid.pool.DruidDataSource|RMI TCP Connection(6)-127.0.0.1|init|947|{dataSource-1} inited
2019-02-25 17:11:52.045|INFO|com.codingapi.tx.framework.utils.SocketManager|pool-11-thread-1|sleepSend|84|send-msg->{"a":"umi","k":"szJupaFd","p":{"u":"286bae9563235576a14a2ae8fdd7215a","i":"192.168.4.152:18089","m":"jm-relationship-service"}}
